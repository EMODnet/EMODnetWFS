[{"path":"https://emodnet.github.io/EMODnetWFS/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to EMODnetWFS","title":"Contributing to EMODnetWFS","text":"outlines propose change EMODnetWFS.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to EMODnetWFS","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to EMODnetWFS","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to EMODnetWFS","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"EMODnet/EMODnetWFS\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to EMODnetWFS","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat httptest unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/CONTRIBUTING.html","id":"collaborators","dir":"","previous_headings":"","what":"Collaborators","title":"Contributing to EMODnetWFS","text":"Regular contributors listed inst/collaborators.txt ensure user-agent used package flags developers.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 European Marine Observation Data Network (EMODnet) Biology project Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"cql-ecql-query-languages-","dir":"Articles","previous_headings":"","what":"CQL & ECQL Query languages.","title":"EQCL feature filtering","text":"CQL (Common Query Language) plain-text language created OGC Catalog specification. GeoServer adapted easy--use filtering mechanism. GeoServer actually implements powerful extension called ECQL (Extended CQL), allows expressing full range filters OGC Filter 1.1 can encode. ECQL accepted many places GeoServer. GeoServer supports use CQL ECQL WFS requests whenever documentation refers CQL, ECQL syntax can used well. examples provided small subset filtering functionality available Geoserver. Full references examples can found following documentation: ECQL Reference: reference syntax ECQL language. Filter Function Reference: OGC Filter Encoding specification provides generic concept filter function. filter function named function number arguments, can used filter expression perform specific calculations. provides much richer expressiveness defining filters.GeoServer provides many different kinds filter functions, covering wide range functionality including mathematics, string formatting, geometric operations. CQL ECQL Tutorial shows examples defining filters.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"initialise-emodnet-wfs-client","dir":"Articles","previous_headings":"","what":"Initialise EMODnet WFS client","title":"EQCL feature filtering","text":"First, let’s load library start new WFS client emodnet_init_wfs_client.","code":"library(EMODnetWFS) wfs <- emodnet_init_wfs_client(service = \"biology\") #> Loading ISO 19139 XML schemas... #> Loading ISO 19115 codelists... #> ✔ WFS client created successfully #> ℹ Service: \"https://geo.vliz.be/geoserver/Emodnetbio/wfs\" #> ℹ Version: \"2.0.0\""},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"inspecting-attributes","dir":"Articles","previous_headings":"","what":"Inspecting attributes","title":"EQCL feature filtering","text":"develop filters, first need information attributes can filter . example, might want know data type range distribution values attributes given layer. Let’s look existing layers.","code":"emodnet_get_wfs_info(wfs) #> # A tibble: 33 × 9 #> # Rowwise:  #>    data_source service_name service…¹ layer…² title abstr…³ class format layer…⁴ #>    <chr>       <chr>        <chr>     <chr>   <chr> <chr>   <chr> <chr>  <chr>   #>  1 emodnet_wfs biology      https://… medise… EMOD… \"Coral… WFSF… sf     Emodne… #>  2 emodnet_wfs biology      https://… medise… EMOD… \"Coral… WFSF… sf     Emodne… #>  3 emodnet_wfs biology      https://… medise… EMOD… \"Cymod… WFSF… sf     Emodne… #>  4 emodnet_wfs biology      https://… Specie… EMOD… \"This … WFSF… sf     Emodne… #>  5 emodnet_wfs biology      https://… Specie… EMOD… \"This … WFSF… sf     Emodne… #>  6 emodnet_wfs biology      https://… Specie… EMOD… \"This … WFSF… sf     Emodne… #>  7 emodnet_wfs biology      https://… Specie… EMOD… \"This … WFSF… sf     Emodne… #>  8 emodnet_wfs biology      https://… medise… EMOD… \"Halop… WFSF… sf     Emodne… #>  9 emodnet_wfs biology      https://… medise… EMOD… \"Maërl… WFSF… sf     Emodne… #> 10 emodnet_wfs biology      https://… medise… EMOD… \"Maërl… WFSF… sf     Emodne… #> # … with 23 more rows, and abbreviated variable names ¹​service_url, #> #   ²​layer_name, ³​abstract, ⁴​layer_namespace"},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"layer-attribute-names","dir":"Articles","previous_headings":"Inspecting attributes","what":"Layer attribute names","title":"EQCL feature filtering","text":"start, might want know names layer’s attributes. functions can also used providing service name instead wfs object.","code":"layer_attributes_get_names(wfs, layer = \"mediseh_zostera_m_pnt\") #> [1] \"id\"       \"country\"  \"the_geom\" layer_attributes_get_names(service = \"biology\", layer = \"mediseh_zostera_m_pnt\") #> ✔ WFS client created successfully #> ℹ Service: \"https://geo.vliz.be/geoserver/Emodnetbio/wfs\" #> ℹ Version: \"2.0.0\" #> [1] \"id\"       \"country\"  \"the_geom\""},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"layer-attribute-descriptions","dir":"Articles","previous_headings":"Inspecting attributes","what":"Layer attribute descriptions","title":"EQCL feature filtering","text":"type filtering might want apply depend data type attribute. can inspect attribute descriptions (metadata) given layer layer_attribute_descriptions().","code":"layer_attribute_descriptions(wfs, layer = \"mediseh_zostera_m_pnt\") #>       name      type minOccurs maxOccurs nillable geometry #> 1       id   integer         0         1     TRUE    FALSE #> 2  country character         0         1     TRUE    FALSE #> 3 the_geom     Point         0         1     TRUE     TRUE"},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"layer-attribute-summaries","dir":"Articles","previous_headings":"Inspecting attributes","what":"Layer attribute summaries","title":"EQCL feature filtering","text":"can get summaries values attribute layer_attributes_summarise(). function basically runs summary() attribute columns layer.","code":"layer_attributes_summarise(wfs, layer = \"mediseh_zostera_m_pnt\") #>     gml_id                id      country          #>  Length:54          Min.   :0   Length:54          #>  Class :character   1st Qu.:0   Class :character   #>  Mode  :character   Median :0   Mode  :character   #>                     Mean   :0                      #>                     3rd Qu.:0                      #>                     Max.   :0"},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"inspecting-individual-layer-attributes","dir":"Articles","previous_headings":"Inspecting attributes","what":"Inspecting individual layer attributes","title":"EQCL feature filtering","text":"can also inspect individual attributes , case categorical variables, can give detailed information names distribution categories.","code":"layer_attribute_inspect(wfs, layer = \"mediseh_zostera_m_pnt\", attribute = \"country\") #> # A tibble: 7 × 3 #>   .            n percent #>   <chr>    <int>   <dbl> #> 1 Croazia      4  0.0741 #> 2 Francia      1  0.0185 #> 3 Italia      30  0.556  #> 4 Libia        2  0.0370 #> 5 Slovenia     8  0.148  #> 6 Spagna       8  0.148  #> 7 Tunisia      1  0.0185"},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"layer-attributes-table","dir":"Articles","previous_headings":"","what":"Layer attributes table","title":"EQCL feature filtering","text":"Finally, enable full inspection custom processing attribute data, can download full set attributes data.frame, excluding geometry column. geometries usually largest column, much faster downloading full layer can useful developing attribute filtering rules. Data summary Variable type: character Variable type: numeric","code":"attr_tbl <- layer_attributes_tbl(wfs, layer = \"mediseh_zostera_m_pnt\")  attr_tbl #> # A tibble: 54 × 3 #>    gml_id                      id country #>    <chr>                    <int> <chr>   #>  1 mediseh_zostera_m_pnt.1      0 Spagna  #>  2 mediseh_zostera_m_pnt.2      0 Spagna  #>  3 mediseh_zostera_m_pnt.3      0 Spagna  #>  4 mediseh_zostera_m_pnt.4      0 Spagna  #>  5 mediseh_zostera_m_pnt.5      0 Spagna  #>  6 mediseh_zostera_m_pnt.6      0 Spagna  #>  7 mediseh_zostera_m_pnt.7      0 Spagna  #>  8 mediseh_zostera_m_pnt.8      0 Francia #>  9 mediseh_zostera_m_pnt.9      0 Italia  #> 10 mediseh_zostera_m_pnt.10     0 Italia  #> # … with 44 more rows skimr::skim(attr_tbl)"},{"path":[]},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"filtering-categorical-attributes-values-using-text-comparisons","dir":"Articles","previous_headings":"Filtering by attributes","what":"Filtering categorical attributes values using text comparisons","title":"EQCL feature filtering","text":"know values categorical attribute layer, can use filter features returned query. example, let’s say interested results France. previous interrogation attributes associated mediseh_zostera_m_pnt layer, seen attribute country contains country. can use name attribute value require construct eqcl filter pass request using cql_filter argument. shows basic text comparisons can make use equality operator =. want match one value, can use operator instead provide list values compare . example, request France Spain, use following filter: using filter: text comparisons include text pattern matching using operator LIKE. example, request maritime boundaries countries starting S, can use following filter: CQL/ECQL filters can also include filter functions available GeoServer, including multiple string functions greatly increases power CQL expressions. example, can request countries contain l anywhere, including first letter. make request case independent, can turn country names lowercase use like comparison lowercase l:","code":"emodnet_get_layers(     wfs,     layers = \"mediseh_zostera_m_pnt\",     cql_filter = \"country = 'Francia'\" ) #> $mediseh_zostera_m_pnt #> Simple feature collection with 1 feature and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4.84864 ymin: 43.37637 xmax: 4.84864 ymax: 43.37637 #> Geodetic CRS:  WGS 84 #>                    gml_id id country                 the_geom #> 1 mediseh_zostera_m_pnt.8  0 Francia POINT (4.84864 43.37637) emodnet_get_layers(     wfs,     layers = \"mediseh_zostera_m_pnt\",     cql_filter = \"country IN ('Francia', 'Spagna')\" ) #> $mediseh_zostera_m_pnt #> Simple feature collection with 9 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -4.167154 ymin: 36.71226 xmax: 4.84864 ymax: 43.37637 #> Geodetic CRS:  WGS 84 #>                     gml_id id country                   the_geom #> 1  mediseh_zostera_m_pnt.1  0  Spagna  POINT (-2.61314 36.71681) #> 2  mediseh_zostera_m_pnt.2  0  Spagna POINT (-3.846598 36.75127) #> 3  mediseh_zostera_m_pnt.3  0  Spagna POINT (-3.957785 36.72266) #> 4  mediseh_zostera_m_pnt.4  0  Spagna POINT (-4.039712 36.74217) #> 5  mediseh_zostera_m_pnt.5  0  Spagna POINT (-4.100182 36.72331) #> 6  mediseh_zostera_m_pnt.6  0  Spagna POINT (-4.167154 36.71226) #> 7  mediseh_zostera_m_pnt.7  0  Spagna POINT (-1.268366 37.55796) #> 8  mediseh_zostera_m_pnt.8  0 Francia   POINT (4.84864 43.37637) #> 9 mediseh_zostera_m_pnt.54  0  Spagna  POINT (3.291868 42.29132) emodnet_get_layers(     wfs,     layers = \"mediseh_zostera_m_pnt\",     cql_filter = \"country='Francia' OR country='Spagna'\" ) #> $mediseh_zostera_m_pnt #> Simple feature collection with 9 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -4.167154 ymin: 36.71226 xmax: 4.84864 ymax: 43.37637 #> Geodetic CRS:  WGS 84 #>                     gml_id id country                   the_geom #> 1  mediseh_zostera_m_pnt.1  0  Spagna  POINT (-2.61314 36.71681) #> 2  mediseh_zostera_m_pnt.2  0  Spagna POINT (-3.846598 36.75127) #> 3  mediseh_zostera_m_pnt.3  0  Spagna POINT (-3.957785 36.72266) #> 4  mediseh_zostera_m_pnt.4  0  Spagna POINT (-4.039712 36.74217) #> 5  mediseh_zostera_m_pnt.5  0  Spagna POINT (-4.100182 36.72331) #> 6  mediseh_zostera_m_pnt.6  0  Spagna POINT (-4.167154 36.71226) #> 7  mediseh_zostera_m_pnt.7  0  Spagna POINT (-1.268366 37.55796) #> 8  mediseh_zostera_m_pnt.8  0 Francia   POINT (4.84864 43.37637) #> 9 mediseh_zostera_m_pnt.54  0  Spagna  POINT (3.291868 42.29132) emodnet_get_layers(     wfs = wfs,     layers = \"mediseh_zostera_m_pnt\",     cql_filter = \"country LIKE 'S%'\",                        reduce_layers = TRUE ) #> Simple feature collection with 16 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -4.167154 ymin: 36.71226 xmax: 13.73725 ymax: 45.58252 #> Geodetic CRS:  WGS 84 #> First 10 features: #>                      gml_id id  country                   the_geom #> 1   mediseh_zostera_m_pnt.1  0   Spagna  POINT (-2.61314 36.71681) #> 2   mediseh_zostera_m_pnt.2  0   Spagna POINT (-3.846598 36.75127) #> 3   mediseh_zostera_m_pnt.3  0   Spagna POINT (-3.957785 36.72266) #> 4   mediseh_zostera_m_pnt.4  0   Spagna POINT (-4.039712 36.74217) #> 5   mediseh_zostera_m_pnt.5  0   Spagna POINT (-4.100182 36.72331) #> 6   mediseh_zostera_m_pnt.6  0   Spagna POINT (-4.167154 36.71226) #> 7   mediseh_zostera_m_pnt.7  0   Spagna POINT (-1.268366 37.55796) #> 8  mediseh_zostera_m_pnt.39  0 Slovenia  POINT (13.73725 45.56948) #> 9  mediseh_zostera_m_pnt.40  0 Slovenia  POINT (13.70701 45.58252) #> 10 mediseh_zostera_m_pnt.41  0 Slovenia  POINT (13.71894 45.54535) emodnet_get_layers(     wfs = wfs,     layers = \"mediseh_zostera_m_pnt\",     cql_filter = \"strToLowerCase(country) LIKE '%l%'\",     reduce_layers = TRUE ) #> Simple feature collection with 40 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 11.71682 ymin: 33.07783 xmax: 14.4714 ymax: 45.72451 #> Geodetic CRS:  WGS 84 #> First 10 features: #>                      gml_id id country                  the_geom #> 1   mediseh_zostera_m_pnt.9  0  Italia POINT (13.71831 45.70017) #> 2  mediseh_zostera_m_pnt.10  0  Italia POINT (13.16378 45.72451) #> 3  mediseh_zostera_m_pnt.11  0  Italia POINT (13.35982 45.70508) #> 4  mediseh_zostera_m_pnt.12  0  Italia POINT (12.26722 45.25975) #> 5  mediseh_zostera_m_pnt.13  0  Italia   POINT (12.31285 45.362) #> 6  mediseh_zostera_m_pnt.14  0  Italia POINT (12.53509 45.53269) #> 7  mediseh_zostera_m_pnt.15  0  Italia  POINT (12.48269 45.5065) #> 8  mediseh_zostera_m_pnt.16  0  Italia POINT (12.77334 43.96751) #> 9  mediseh_zostera_m_pnt.17  0  Italia POINT (13.62604 43.50809) #> 10 mediseh_zostera_m_pnt.18  0  Italia POINT (13.46398 43.60892)"},{"path":[]},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"filtering-numeric-variables","dir":"Articles","previous_headings":"Filtering by attributes","what":"Filtering numeric variables","title":"EQCL feature filtering","text":"number additional comparison operators, =, <>, >, >=, <, <= , arithmetic operators +, -, *, / well comparison math functions can used filtering numeric variables. time ’ll use mediseh_posidonia_nodata. can inspect , using interrogative functions get information layer attributes. can see values range 0.23 ~473 mean ~40. Let’s say interested values greater 400. can use operator > create filter: request range can use filter functions .","code":"layer_attributes_get_names(wfs, layer = \"mediseh_posidonia_nodata\") #> [1] \"id\"       \"km\"       \"the_geom\"  layer_attribute_inspect(wfs, layer = \"mediseh_posidonia_nodata\", attribute = \"km\") #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #>   0.2371   6.0306  16.6190  40.1771  42.8958 472.9613 emodnet_get_layers(     wfs = wfs,     layers = \"mediseh_posidonia_nodata\",     cql_filter = \"km > 400\",     reduce_layers = TRUE ) #> Simple feature collection with 4 features and 3 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -1.572609 ymin: 35.24538 xmax: 28.33243 ymax: 38.68017 #> Geodetic CRS:  WGS 84 #>                         gml_id id       km                       the_geom #> 1   mediseh_posidonia_nodata.8  0 456.3759 MULTICURVE (LINESTRING (2.3... #> 2 mediseh_posidonia_nodata.227  0 464.6573 MULTICURVE (LINESTRING (26.... #> 3 mediseh_posidonia_nodata.228  0 472.9613 MULTICURVE (LINESTRING (26.... #> 4 mediseh_posidonia_nodata.229  0 463.8207 MULTICURVE (LINESTRING (27.... emodnet_get_layers(     wfs = wfs,     layers = \"mediseh_posidonia_nodata\",     cql_filter = \"km between 40 and 400\",     reduce_layers = TRUE ) #> Simple feature collection with 120 features and 3 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -2.1798 ymin: 30.26623 xmax: 34.59127 ymax: 45.35511 #> Geodetic CRS:  WGS 84 #> First 10 features: #>                         gml_id id        km                       the_geom #> 1   mediseh_posidonia_nodata.1  0 291.50323 MULTICURVE (LINESTRING (27.... #> 2   mediseh_posidonia_nodata.2  0  75.37950 MULTICURVE (LINESTRING (23.... #> 3   mediseh_posidonia_nodata.4  0 110.34480 MULTICURVE (LINESTRING (19.... #> 4  mediseh_posidonia_nodata.13  0  66.99746 MULTICURVE (LINESTRING (9.1... #> 5   mediseh_posidonia_nodata.5  0 222.44651 MULTICURVE (LINESTRING (8.6... #> 6   mediseh_posidonia_nodata.6  0  58.72822 MULTICURVE (LINESTRING (6.8... #> 7   mediseh_posidonia_nodata.7  0 192.50519 MULTICURVE (LINESTRING (6.4... #> 8  mediseh_posidonia_nodata.10  0  65.74354 MULTICURVE (LINESTRING (-1.... #> 9  mediseh_posidonia_nodata.11  0 138.68819 MULTICURVE (LINESTRING (4.8... #> 10 mediseh_posidonia_nodata.17  0 184.05959 MULTICURVE (LINESTRING (10...."},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"using-or-and-and-statements","dir":"Articles","previous_headings":"Filtering by attributes","what":"Using OR and AND statements","title":"EQCL feature filtering","text":"Filter conditions can also logical combination conditions using , . showed previously use list potential values match attribute . also achieved using statement. example, following query returns features country either Baltic Sea Bulgaria. Let’s say also want restrict features returned shape_length > 1. can include additional condition must met using statement. query returns features country Baltic Sea Bulgaria can see minimum value minimum set filter. ’s filter added country='Bulgaria', features shape_length > 1 returned country also Bulgaria, filter applied shape_length country Baltic Sea. add filter filters, can use parenthesis: Now minimum value indeed 1. However, get features country 'Bulgaria'. ’s single Baltic Sea feature shape_length value smaller 1 filtered . Finally filtering shape_length < 1 returns features shape_length values smaller 1 country values.","code":"wfs <- emodnet_init_wfs_client(service = \"geology_seabed_substrate_maps\") emodnet_get_layers(     wfs = wfs,     layers = \"seabed_substrate_1m\",     cql_filter = \"country='Baltic Sea' OR country='Bulgaria'\",     reduce_layers = TRUE ) filter_sf1 <- emodnet_get_layers(     wfs = wfs,     layers = \"seabed_substrate_1m\",     cql_filter = \"country='Baltic Sea' OR country='Bulgaria' AND shape_length>1\",     reduce_layers = TRUE ) filter_sf1 unique(filter_sf1$country)  min(filter_sf1$shape_length) filter_sf2 <- emodnet_get_layers(     wfs = wfs,     layers = \"seabed_substrate_1m\",     cql_filter = \"(country='Baltic Sea' OR country='Bulgaria') AND shape_length>1\",     reduce_layers = TRUE ) min(filter_sf2$shape_length) unique(filter_sf2$country) filter_sf3 <- emodnet_get_layers(     wfs = wfs,     layers = \"seabed_substrate_1m\",     cql_filter = \"(country='Baltic Sea' OR country='Bulgaria') AND shape_length<1\",     reduce_layers = TRUE ) max(filter_sf3$shape_length) unique(filter_sf3$country)"},{"path":"https://emodnet.github.io/EMODnetWFS/articles/ecql_filtering.html","id":"advanced-use","dir":"Articles","previous_headings":"Filtering by attributes","what":"Advanced use","title":"EQCL feature filtering","text":"can accomplished using EMODnet WFS services downloading data. EMODnetWFS package built top ows4R library, meaning functionalities package available EMODnetWFS. ows4R returns special type R object called R6. can learn Hadley Wickham’s chapter R6 Objects Advance R book. instance: efficient read large dataset R just later subset part . requires longer waiting times bandwidth usage, large datasets simply possible. instance, occurrences data available EMODnet Biology portal stored one table: approximately 30 millions rows! case, suggest access EMODnet Biology occurrence data download toolbox eurobis R package instead.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/articles/emodnetwfs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"EMODnetWFS Case Study: Accessing and mapping EMODnet data","text":"package designed make EMODnet vector data layers easily accessible R. package allows users query information download data available EMODnet Web Feature Service (WFS) endpoints directly R working environment. Data managed sf objects currently state---art handling vector spatial data R. package also allows user specify coordinate reference system imported data.","code":""},{"path":[]},{"path":"https://emodnet.github.io/EMODnetWFS/articles/emodnetwfs.html","id":"installation","dir":"Articles","previous_headings":"Data Product","what":"Installation","title":"EMODnetWFS Case Study: Accessing and mapping EMODnet data","text":"can install development version EMODnetWFS GitHub :","code":"remotes::install_github(\"EMODnet/EMODnetWFS\")"},{"path":"https://emodnet.github.io/EMODnetWFS/articles/emodnetwfs.html","id":"explore-the-emodnet-wfs-services-with-r","dir":"Articles","previous_headings":"Data Product","what":"Explore the EMODnet WFS services with R","title":"EMODnetWFS Case Study: Accessing and mapping EMODnet data","text":"tutorial make use sf, dplyr mapview packages. simple features sf package well known standard dealing geospatial vector data. package dplyr strong library data manipulation. package also loads magrittr’s pipe operator %>% (also use base pipe), allows write pipelines R. visualize geometries, mapview create quick interactive maps. Run line install packages: EMODnetWFS package, can explore combine data served EMODnet lots OGC Web Feature Services WFS. Imagine interested seabed substrates. first step choose EMODnet lot can provide data. , can check services available emodnet_wfs() function. column service_name shows services available, service_url corresponding base url perform WFS request. Seabed portal data looking . WFS client can created passing corresponding service_name function emodnet_init_wfs_client(). layers available WFS client consulted emodnet_get_wfs_info(). layer explained abstract column. can see several layers information provided EU member states Habitats Directive 92/43/EEC reporting. select layers coastal lagoons, mudflats sandbanks respective layer_name. now ready read layers R emodnet_get_layers(). EMODnetWFS reads geometries simple features (See sf package) transformed 4326 default. Specifying another map projection possible passing EPGS code projection string emodnet_get_layers(crs = \"projection\"). argument reduce_layers = TRUE stack layers one single tibble. Default FALSE returns list sf objects, one per layer. Run following code quick look layers geometries Furthermore, can get data EMODnet lots combine . Human Activities portal provides maritime boundaries European Union state members. time initiate WFS client, use service name. WFS client generated fly. , look layers available first. layer_name maritime boundaries seems maritimebnds. dataset developed based official data provided European Environmental Agency Maritime Boundaries Database compiled MarineRegions.org (Flanders Marine Institute, 2019). sitename variable specifies type boundary feature represents. illustration purposes, filter request return Territorial Seas. Add maritime boundaries previous map line. , cats MULTILINESTRING geometry type, transform crs habitats directive sf (required next step), crop using bounding box habitats directive sf.","code":"install.packages(c(\"sf\", \"dplyr\", \"mapview\")) library(EMODnetWFS) library(mapview) library(dplyr) library(sf)  emodnet_wfs() #>                                                       service_name #> 1                                                       bathymetry #> 2                                                          biology #> 3                                          biology_occurrence_data #> 4                  chemistry_cdi_data_discovery_and_access_service #> 5  chemistry_cdi_distribution_observations_per_category_and_region #> 6                                           chemistry_contaminants #> 7                                          chemistry_marine_litter #> 8                                         geology_coastal_behavior #> 9                                 geology_events_and_probabilities #> 10                                         geology_marine_minerals #> 11                                       geology_sea_floor_bedrock #> 12                                   geology_seabed_substrate_maps #> 13                                    geology_submerged_landscapes #> 14                                                human_activities #> 15                                                         physics #> 16                   seabed_habitats_general_datasets_and_products #> 17       seabed_habitats_individual_habitat_map_and_model_datasets #>                                                                    service_url #> 1                                        https://ows.emodnet-bathymetry.eu/wfs #> 2                                 https://geo.vliz.be/geoserver/Emodnetbio/wfs #> 3                                 https://geo.vliz.be/geoserver/Dataportal/wfs #> 4                           https://geo-service.maris.nl/emodnet_chemistry/wfs #> 5                       https://geo-service.maris.nl/emodnet_chemistry_p36/wfs #> 6                       https://nodc.ogs.trieste.it/geoserver/Contaminants/wfs #> 7                       https://www.ifremer.fr/services/wfs/emodnet_chemistry2 #> 8                           https://drive.emodnet-geology.eu/geoserver/tno/wfs #> 9                         https://drive.emodnet-geology.eu/geoserver/ispra/wfs #> 10                          https://drive.emodnet-geology.eu/geoserver/gsi/wfs #> 11                          https://drive.emodnet-geology.eu/geoserver/bgr/wfs #> 12                          https://drive.emodnet-geology.eu/geoserver/gtk/wfs #> 13                          https://drive.emodnet-geology.eu/geoserver/bgs/wfs #> 14                                  https://ows.emodnet-humanactivities.eu/wfs #> 15                     https://prod-geoserver.emodnet-physics.eu/geoserver/ows #> 16            https://ows.emodnet-seabedhabitats.eu/geoserver/emodnet_open/wfs #> 17 https://ows.emodnet-seabedhabitats.eu/geoserver/emodnet_open_maplibrary/wfs seabed_wfs_client <- emodnet_init_wfs_client(service = \"seabed_habitats_general_datasets_and_products\") #> Loading ISO 19139 XML schemas... #> Loading ISO 19115 codelists... #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-seabedhabitats.eu/geoserver/emodnet_open/wfs\" #> ℹ Version: \"2.0.0\"  emodnet_get_wfs_info(wfs = seabed_wfs_client) #> # A tibble: 35 × 9 #> # Rowwise:  #>    data_source service_name   servi…¹ layer…² title abstr…³ class format layer…⁴ #>    <chr>       <chr>          <chr>   <chr>   <chr> <chr>   <chr> <chr>  <chr>   #>  1 emodnet_wfs seabed_habita… https:… art17_… 2013… \"Gridd… WFSF… sf     emodne… #>  2 emodnet_wfs seabed_habita… https:… art17_… 2013… \"Gridd… WFSF… sf     emodne… #>  3 emodnet_wfs seabed_habita… https:… art17_… 2013… \"Gridd… WFSF… sf     emodne… #>  4 emodnet_wfs seabed_habita… https:… art17_… 2013… \"Gridd… WFSF… sf     emodne… #>  5 emodnet_wfs seabed_habita… https:… art17_… 2013… \"Gridd… WFSF… sf     emodne… #>  6 emodnet_wfs seabed_habita… https:… art17_… 2013… \"Gridd… WFSF… sf     emodne… #>  7 emodnet_wfs seabed_habita… https:… art17_… 2013… \"Gridd… WFSF… sf     emodne… #>  8 emodnet_wfs seabed_habita… https:… art17_… 2013… \"Gridd… WFSF… sf     emodne… #>  9 emodnet_wfs seabed_habita… https:… art17_… 2018… \"Gridd… WFSF… sf     emodne… #> 10 emodnet_wfs seabed_habita… https:… biogen… Biog… \"This … WFSF… sf     emodne… #> # … with 25 more rows, and abbreviated variable names ¹​service_url, #> #   ²​layer_name, ³​abstract, ⁴​layer_namespace habitats_directive_layer_names <- c(\"art17_hab_1110\", \"art17_hab_1140\", \"art17_hab_1150\")  emodnet_get_layer_info(     wfs = seabed_wfs_client,      layers = habitats_directive_layer_names )  #> # A tibble: 3 × 9 #> # Rowwise:  #>   data_source service_name    servi…¹ layer…² title abstr…³ class format layer…⁴ #>   <chr>       <chr>           <chr>   <chr>   <chr> <chr>   <chr> <chr>  <chr>   #> 1 emodnet_wfs https://ows.em… seabed… art17_… 2013… \"Gridd… WFSF… sf     emodne… #> 2 emodnet_wfs https://ows.em… seabed… art17_… 2013… \"Gridd… WFSF… sf     emodne… #> 3 emodnet_wfs https://ows.em… seabed… art17_… 2013… \"Gridd… WFSF… sf     emodne… #> # … with abbreviated variable names ¹​service_url, ²​layer_name, ³​abstract, #> #   ⁴​layer_namespace habitats_directive_layers <- emodnet_get_layers(wfs = seabed_wfs_client,                                                 layers = habitats_directive_layer_names,                                                 reduce_layers = TRUE)   class(habitats_directive_layers) #> [1] \"sf\"         \"data.frame\"  glimpse(habitats_directive_layers) #> Rows: 221 #> Columns: 9 #> $ gml_id              <chr> \"art17_hab_1110.13\", \"art17_hab_1110.22\", \"art17_h… #> $ habitat_code        <chr> \"1110\", \"1110\", \"1110\", \"1110\", \"1110\", \"1110\", \"1… #> $ ms                  <chr> \"DK\", \"ES\", \"ES\", \"PT\", \"PT\", \"PL\", \"DK\", \"FR\", \"U… #> $ region              <chr> \"ATL\", \"MAC\", \"MMAC\", \"MMAC\", \"MATL\", \"MBAL\", \"MBA… #> $ cs_ms               <chr> \"U2+\", \"U1+\", \"U1+\", \"XX\", \"U1-\", \"U1-\", \"U1-\", \"U… #> $ country_code        <chr> \"Denmark\", \"Spain\", \"Spain\", \"Portugal\", \"Portugal… #> $ habitat_code_uri    <chr> \"http://dd.eionet.europa.eu/vocabulary/art17_2018/… #> $ habitat_description <chr> \"Sandbanks which are slightly covered by sea water… #> $ geom                <MULTISURFACE [m]> MULTISURFACE (POLYGON ((420..., MULTI… # Transform to Polygon geometry type from Multisurface if (unique(st_geometry_type(habitats_directive_layers)) == \"MULTISURFACE\") {   habitats_directive_layers <- habitats_directive_layers %>%     st_cast(to = \"GEOMETRYCOLLECTION\") %>%     st_collection_extract(type = \"POLYGON\") }  # Visualize map <- mapview(habitats_directive_layers, zcol = \"habitat_description\", burst = TRUE)  map emodnet_get_wfs_info(service = \"human_activities\") #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-humanactivities.eu/wfs\" #> ℹ Version: \"2.0.0\" #> # A tibble: 99 × 9 #> # Rowwise:  #>    data_source service_name   servi…¹ layer…² title abstr…³ class format layer…⁴ #>    <chr>       <chr>          <chr>   <chr>   <chr> <chr>   <chr> <chr>  <chr>   #>  1 emodnet_wfs human_activit… https:… active… Acti… The da… WFSF… sf     emodnet #>  2 emodnet_wfs human_activit… https:… adviso… Advi… This s… WFSF… sf     emodnet #>  3 emodnet_wfs human_activit… https:… aquacu… Advi… This s… WFSF… sf     emodnet #>  4 emodnet_wfs human_activit… https:… baltic  Advi… This s… WFSF… sf     emodnet #>  5 emodnet_wfs human_activit… https:… blacks… Advi… This s… WFSF… sf     emodnet #>  6 emodnet_wfs human_activit… https:… longdi… Advi… This s… WFSF… sf     emodnet #>  7 emodnet_wfs human_activit… https:… market  Advi… This s… WFSF… sf     emodnet #>  8 emodnet_wfs human_activit… https:… medite… Advi… This s… WFSF… sf     emodnet #>  9 emodnet_wfs human_activit… https:… norths… Advi… This s… WFSF… sf     emodnet #> 10 emodnet_wfs human_activit… https:… northw… Advi… This s… WFSF… sf     emodnet #> # … with 89 more rows, and abbreviated variable names ¹​service_url, #> #   ²​layer_name, ³​abstract, ⁴​layer_namespace maritime_boundaries <- emodnet_get_layers(service = \"human_activities\",                                           layers = \"maritimebnds\",                                           reduce_layers = TRUE,                                           cql_filter = \"sitename='Territory sea (12 nm)'\") #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-humanactivities.eu/wfs\" #> ℹ Version: \"2.0.0\"  glimpse(maritime_boundaries) #> Rows: 64 #> Columns: 13 #> $ gml_id     <chr> \"maritimebnds.54\", \"maritimebnds.55\", \"maritimebnds.56\", \"m… #> $ objectid   <dbl> 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 39,… #> $ mblszotpid <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ localid    <dbl> 49036, 49042, 49063, 49064, 49065, 49066, 49087, 49099, 491… #> $ sitename   <chr> \"Territory sea (12 nm)\", \"Territory sea (12 nm)\", \"Territor… #> $ legalfound <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ legalfou_1 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ country    <chr> \"United Kingdom\", \"France\", \"France\", \"France\", \"France\", \"… #> $ nationalle <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nutscode   <chr> \"UK\", \"FR\", \"FR\", \"FR\", \"FR\", \"FR\", \"ES\", \"CY\", \"UK\", \"UK\",… #> $ mblsds_mbl <chr> \"In www.marineregions.org\", \"In www.marineregions.org\", \"In… #> $ shape_leng <dbl> 141.545470, 70.017156, 5.116398, 1.949563, 2.072975, 1.8378… #> $ the_geom   <MULTICURVE [°]> MULTICURVE (LINESTRING (-13..., MULTICURVE (LINE… maritime_boundaries <- maritime_boundaries %>%   st_cast(to = \"MULTILINESTRING\") %>%   st_transform(st_crs(habitats_directive_layers)) %>%   st_crop(st_bbox(habitats_directive_layers))  map + mapview(maritime_boundaries)"},{"path":"https://emodnet.github.io/EMODnetWFS/articles/request-params.html","id":"initialise-a-wfs-client","dir":"Articles","previous_headings":"","what":"Initialise a WFS client","title":"Using request parameters to limit query results","text":"Let’s start loading EMODnetWFS initialising WFS client human_activities WFS service.","code":"library(EMODnetWFS)  wfs <- emodnet_init_wfs_client(\"human_activities\") #> Loading ISO 19139 XML schemas... #> Loading ISO 19115 codelists... #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-humanactivities.eu/wfs\" #> ℹ Version: \"2.0.0\""},{"path":"https://emodnet.github.io/EMODnetWFS/articles/request-params.html","id":"return-single-feature-using-feature-id","dir":"Articles","previous_headings":"","what":"Return single feature using feature ID","title":"Using request parameters to limit query results","text":"can restrict query single feature using featureID providing ID specific feature.","code":"emodnet_get_layers(     wfs = wfs,     layers = \"maritimebnds\",     featureID = \"maritimebnds.861\",     reduce_layers = TRUE) #> Simple feature collection with 1 feature and 12 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -80.03719 ymin: 18.05616 xmax: -78.72694 ymax: 19.35781 #> Geodetic CRS:  WGS 84 #>             gml_id objectid mblszotpid localid                         sitename #> 1 maritimebnds.861      861          3    3494 Delimitation line between states #>   legalfound legalfou_1                 country nationalle nutscode #> 1 1932-01-30       <NA> United Kingdom, Jamaica       <NA>   UK, JM #>                                   mblsds_mbl shape_leng #> 1 In www.marineregions.org. VLIZ Median Line   1.847992 #>                         the_geom #> 1 MULTICURVE (LINESTRING (-78..."},{"path":"https://emodnet.github.io/EMODnetWFS/articles/request-params.html","id":"return-specific-number-of-features","dir":"Articles","previous_headings":"","what":"Return specific number of features","title":"Using request parameters to limit query results","text":"ID feature unknown still want limit number features returned, use count parameter WFS 2.0.0 maxFeatures parameter earlier WFS versions restrict number features returned. example restrict query first feature.","code":"emodnet_get_layers(     wfs = wfs,     layers = \"maritimebnds\",     count = 1L,     reduce_layers = TRUE) #> Simple feature collection with 1 feature and 12 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: 6.6236 ymin: 52.87112 xmax: 14.04677 ymax: 55.0804 #> Geodetic CRS:  WGS 84 #>           gml_id objectid mblszotpid localid        sitename legalfound #> 1 maritimebnds.1        1          7   49469 Internal waters       <NA> #>   legalfou_1 country nationalle nutscode               mblsds_mbl shape_leng #> 1       <NA> Germany       <NA>       DE In www.marineregions.org    54.8404 #>                         the_geom #> 1 MULTICURVE (LINESTRING (11...."},{"path":"https://emodnet.github.io/EMODnetWFS/articles/request-params.html","id":"order-features","dir":"Articles","previous_headings":"","what":"Order features","title":"Using request parameters to limit query results","text":"Exactly features returned depends internal structure data. However, can sort returned selection based attribute value using sortBy parameter. Say wanted return 5 earliest maritime boundaries. following example, sort \"legalfound\" attribute (contains date boundary legally founded) combine count parameter restrict number features returned. returns first 5 features data ordered \"legalfound\". default sort operation sort ascending order. WFS servers require sort order specified. case, append +attribute character string passed sortBy. Conversely, add +D sort descending order.","code":"emodnet_get_layers(     wfs = wfs,     layers = \"maritimebnds\",     sortBy = \"legalfound\",     count = 5L,     reduce_layers = TRUE) #> Simple feature collection with 5 features and 12 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -80.03719 ymin: 18.05616 xmax: 21.53884 ymax: 56.21403 #> Geodetic CRS:  WGS 84 #>             gml_id objectid mblszotpid localid                         sitename #> 1 maritimebnds.859      859          3    3488 Delimitation line between states #> 2 maritimebnds.860      860          3    3489 Delimitation line between states #> 3 maritimebnds.738      738          4    2026                Continental Shelf #> 4 maritimebnds.858      858          4    2027                Continental Shelf #> 5 maritimebnds.861      861          3    3494 Delimitation line between states #>   legalfound legalfou_1                 country nationalle nutscode #> 1 1932-01-30       <NA>       Lithuania, Russia       <NA>   LT, RU #> 2 1932-01-30       <NA>         Portugal, Spain       <NA>   PT, ES #> 3 1932-01-30  61562.pdf         Sweden, Denmark  Bilateral   SE, DK #> 4 1932-01-30  61562.pdf         Sweden, Denmark  Bilateral   SE, DK #> 5 1932-01-30       <NA> United Kingdom, Jamaica       <NA>   UK, JM #>                                                   mblsds_mbl shape_leng #> 1                 In www.marineregions.org. VLIZ Median Line  0.6811054 #> 2                 In www.marineregions.org. VLIZ Median Line  1.8957056 #> 3 Territorial sea boundary agreement with Swedenin the Sound  0.4718419 #> 4 Territorial sea boundary agreement with Swedenin the Sound  0.8901870 #> 5                 In www.marineregions.org. VLIZ Median Line  1.8479924 #>                         the_geom #> 1 MULTICURVE (LINESTRING (21.... #> 2 MULTICURVE (LINESTRING (-7.... #> 3 MULTICURVE (LINESTRING (12.... #> 4 MULTICURVE (LINESTRING (12.... #> 5 MULTICURVE (LINESTRING (-78..."},{"path":"https://emodnet.github.io/EMODnetWFS/articles/request-params.html","id":"return-blocks-of-features-from-specific-starting-point","dir":"Articles","previous_headings":"","what":"Return blocks of features from specific starting point","title":"Using request parameters to limit query results","text":"Finally WFS version 2.0.0 (also available earlier versions GeoServer) startIndex parameter introduced, allowing users specify starting index features returned. example, full \"maritimebnds\" layer contains 1047 features. Setting startIndex n_features - 4 (1043) returns last 4 features. can also combine startIndex count return specific blocks features. example, following query request features 5-9 supplying startIndex 4 count 5. Note startIndex uses 0 starting index (0 indicates first feature), hence set 4 order start 5th feature. combination , example, loop, can used download process large layer might able handled R smaller, manageable blocks features.","code":"#> [1] 1047 n_features <- layer_attributes_tbl(wfs = wfs, layer = \"maritimebnds\") %>% nrow()  n_features startIndex <- n_features - 4L startIndex #> [1] 1043  emodnet_get_layers(        wfs = wfs,     layers = \"maritimebnds\",     startIndex = startIndex,     reduce_layers = TRUE) #> Simple feature collection with 4 features and 12 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -13.85305 ymin: 35.66859 xmax: 10.21833 ymax: 51.55778 #> Geodetic CRS:  WGS 84 #>              gml_id objectid mblszotpid localid #> 1 maritimebnds.1044     1044          2       0 #> 2 maritimebnds.1045     1045          2       0 #> 3 maritimebnds.1046     1046          1   49033 #> 4 maritimebnds.1047     1047          1   49018 #>                               sitename legalfound          legalfou_1 country #> 1 Exclusive Economic Zone (200 nm) EEZ 1997-07-31 ESP_1997_Decree.pdf   Spain #> 2 Exclusive Economic Zone (200 nm) EEZ 1976-07-15    FRA_1976_Law.pdf  France #> 3                Territory sea (12 nm)       <NA>                <NA>   Spain #> 4                Territory sea (12 nm)       <NA>                <NA>  France #>   nationalle nutscode #> 1 Unilateral       ES #> 2 Unilateral       FR #> 3       <NA>       ES #> 4       <NA>       FR #>                                                                                                    mblsds_mbl #> 1 Royal Decree 1315/1997, of 1 August 1997, establishing a Fisheries Protection Zone in the Mediterranean Sea #> 2                                                                                               FRA EEZ 200nm #> 3                                                                                    In www.marineregions.org #> 4                                                                                    In www.marineregions.org #>   shape_leng                       the_geom #> 1  110.91163 MULTICURVE (LINESTRING (4.5... #> 2  130.14609 MULTICURVE (LINESTRING (4.6... #> 3   74.06973 MULTICURVE (LINESTRING (-2.... #> 4   65.51497 MULTICURVE (LINESTRING (9.6... emodnet_get_layers(        wfs = wfs,     layers = \"maritimebnds\",     startIndex = 4L,     count = 6L,     reduce_layers = TRUE) #> Simple feature collection with 6 features and 12 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -10.68333 ymin: 36.6425 xmax: 28.20899 ymax: 66.77516 #> Geodetic CRS:  WGS 84 #>            gml_id objectid mblszotpid localid        sitename legalfound #> 1  maritimebnds.5        5          7   49474 Internal waters       <NA> #> 2  maritimebnds.6        6          7   49475 Internal waters       <NA> #> 3  maritimebnds.7        7          7   49476 Internal waters       <NA> #> 4  maritimebnds.8        8          7   49478 Internal waters       <NA> #> 5  maritimebnds.9        9          7   49479 Internal waters       <NA> #> 6 maritimebnds.10       10          7   49480 Internal waters       <NA> #>   legalfou_1 country nationalle nutscode               mblsds_mbl shape_leng #> 1       <NA> Estonia       <NA>       EE In www.marineregions.org   44.50010 #> 2       <NA> Finland       <NA>       FI In www.marineregions.org  398.75400 #> 3       <NA>  France       <NA>       FR In www.marineregions.org   86.63315 #> 4       <NA> Ireland       <NA>       IE In www.marineregions.org   86.83152 #> 5       <NA>   Italy       <NA>       IT In www.marineregions.org  107.88191 #> 6       <NA>  Latvia       <NA>       LV In www.marineregions.org   15.63377 #>                         the_geom #> 1 MULTICURVE (LINESTRING (22.... #> 2 MULTICURVE (LINESTRING (27.... #> 3 MULTICURVE (LINESTRING (9.4... #> 4 MULTICURVE (LINESTRING (-7.... #> 5 MULTICURVE (LINESTRING (14.... #> 6 MULTICURVE (LINESTRING (24...."},{"path":"https://emodnet.github.io/EMODnetWFS/articles/request-params.html","id":"return-data-for-specific-attributes","dir":"Articles","previous_headings":"","what":"Return data for specific attributes","title":"Using request parameters to limit query results","text":"Finally, can specify specific attributes want data returned using parameter propertyName. limit data returned single attribute \"country\" just 3 features, use parameters propertyName = \"country\" count = 3. Note limiting data specific attributes, columns returned NA (including spatial, case the_geom, column). limit multiple attributes, separate attribute name character string supplied propertyName comma.","code":"emodnet_get_layers(     wfs = wfs,     layers = \"maritimebnds\",     propertyName = \"country\",     count = 3L,     reduce_layers = TRUE) #> Simple feature collection with 3 features and 12 fields (with 3 geometries empty) #> Geometry type: GEOMETRYCOLLECTION #> Dimension:     XY #> Bounding box:  xmin: NA ymin: NA xmax: NA ymax: NA #> Geodetic CRS:  WGS 84 #>           gml_id objectid mblszotpid localid sitename legalfound legalfou_1 #> 1 maritimebnds.1       NA         NA      NA     <NA>       <NA>       <NA> #> 2 maritimebnds.2       NA         NA      NA     <NA>       <NA>       <NA> #> 3 maritimebnds.3       NA         NA      NA     <NA>       <NA>       <NA> #>    country nationalle nutscode mblsds_mbl shape_leng                 the_geom #> 1  Germany       <NA>     <NA>       <NA>         NA GEOMETRYCOLLECTION EMPTY #> 2 Bulgaria       <NA>     <NA>       <NA>         NA GEOMETRYCOLLECTION EMPTY #> 3  Croatia       <NA>     <NA>       <NA>         NA GEOMETRYCOLLECTION EMPTY emodnet_get_layers(     wfs = wfs,     layers = \"maritimebnds\",     propertyName = \"country,the_geom\",     count = 3L,     reduce_layers = TRUE) #> Simple feature collection with 3 features and 12 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: 6.6236 ymin: 42.16325 xmax: 28.4656 ymax: 55.0804 #> Geodetic CRS:  WGS 84 #>           gml_id objectid mblszotpid localid sitename legalfound legalfou_1 #> 1 maritimebnds.1       NA         NA      NA     <NA>       <NA>       <NA> #> 2 maritimebnds.2       NA         NA      NA     <NA>       <NA>       <NA> #> 3 maritimebnds.3       NA         NA      NA     <NA>       <NA>       <NA> #>    country nationalle nutscode mblsds_mbl shape_leng #> 1  Germany       <NA>     <NA>       <NA>         NA #> 2 Bulgaria       <NA>     <NA>       <NA>         NA #> 3  Croatia       <NA>     <NA>       <NA>         NA #>                         the_geom #> 1 MULTICURVE (LINESTRING (11.... #> 2 MULTICURVE (LINESTRING (28.... #> 3 MULTICURVE (LINESTRING (14...."},{"path":"https://emodnet.github.io/EMODnetWFS/articles/request-params.html","id":"limit-spatial-extent-using-a-boundary-box","dir":"Articles","previous_headings":"","what":"Limit spatial extent using a boundary box","title":"Using request parameters to limit query results","text":"bbox parameter allows us search features contained (partially contained) inside box user-defined coordinates. format bbox parameter EMODnet WFS cases (assuming using version 2.0.0) bbox=a1,b1,a2,b2,[crs] a1, b1, a2, b2 represent coordinate values. optional crs parameter used name CRS bbox coordinates (different featureTypes native CRS.) order coordinates passed bbox parameter depends coordinate system used (coordinate syntax isn’t represented x y). following example, specify bounding box proving coordinates order xmin,ymin,xmax,ymax specifying coordinates given EPSG:4326 coordinate reference system.","code":"bbox_response <- emodnet_get_layers(     service = \"biology\",     layers = \"mediseh_posidonia_nodata\",     bbox = \"22.9,34.4,26.8,35.8,EPSG:4326\",     reduce_layers = TRUE ) #> ✔ WFS client created successfully #> ℹ Service: \"https://geo.vliz.be/geoserver/Emodnetbio/wfs\" #> ℹ Version: \"2.0.0\"  bbox_response %>%   sf::st_cast(to = \"MULTILINESTRING\") %>%   mapview::mapview(burst = TRUE, legend = FALSE)"},{"path":"https://emodnet.github.io/EMODnetWFS/articles/request-params.html","id":"non-standard-vendor-parameters","dir":"Articles","previous_headings":"","what":"Non-standard Vendor Parameters","title":"Using request parameters to limit query results","text":"WFS vendor parameters additonal, non-standard request parameters defined implementation provide enhanced capabilities. majority EMODnet services GeoServer WFS implementations support variety vendor-specific WFS parameters. One cql_filters. handled explicitly EMODnetWFS package cql_filter argument emodnet_get_layers() documented detail article(\"ecql_filtering\"). additional vendor parameters available GeoServer implementations please refer WFS vendor parameters documentatio Exceptions Chemistry (Eutrophication sea region, Eutrophication) services uses Python Chemistry (Litter) uses MapServer vendor parameters services might differ.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anna Krystalli. Author. Salvador Fernández-Bejarano. Contributor, maintainer. Thomas J Webb. Contributor. European Marine Observation Data Network (EMODnet) Biology project European Commission's Directorate - General Maritime Affairs Fisheries (DG MARE). Copyright holder. VLIZ (VLAAMS INSTITUUT VOOR DE ZEE). Funder. Maëlle Salmon. Author.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krystalli , Fernández-Bejarano S, Salmon M (????). EMODnetWFS: Access EMODnet Web Feature Service data R. R package version 2.0.1.9001. Integrated data products created European Marine Observation Data Network (EMODnet) Biology project (EASME/EMFF/2017/1.3.1.2/02/SI2.789013), funded European Union Regulation (EU) 508/2014 European Parliament Council 15 May 2014 European Maritime Fisheries Fund, https://github.com/EMODnet/EMODnetWFS.","code":"@Manual{,   title = {{EMODnetWFS}: Access EMODnet Web Feature Service data through R},   author = {Anna Krystalli and Salvador Fernández-Bejarano and Maëlle Salmon},   note = {R package version 2.0.1.9001. Integrated data products created under the European Marine Observation Data Network (EMODnet) Biology project (EASME/EMFF/2017/1.3.1.2/02/SI2.789013), funded by the by the European Union under Regulation (EU) No 508/2014 of the European Parliament and of the Council of 15 May 2014 on the European Maritime and Fisheries Fund},   url = {https://github.com/EMODnet/EMODnetWFS}, }"},{"path":"https://emodnet.github.io/EMODnetWFS/index.html","id":"emodnetwfs-access-emodnet-web-feature-service-data-through-r","dir":"","previous_headings":"","what":"Access EMODnet Web Feature Service data through R","title":"Access EMODnet Web Feature Service data through R","text":"goal EMODnetWFS allow interrogation access EMODnet geographic vector data R though EMODnet Web Feature Services. Web Feature services (WFS) represent change way geographic information created, modified exchanged Internet offer direct fine-grained access geographic information feature feature property level. EMODnetWFS aims offering user-friendly interface rich data.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access EMODnet Web Feature Service data through R","text":"can install development version EMODnetWFS GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"EMODnet/EMODnetWFS\")"},{"path":"https://emodnet.github.io/EMODnetWFS/index.html","id":"available-services","dir":"","previous_headings":"","what":"Available services","title":"Access EMODnet Web Feature Service data through R","text":"available services contained tibble returned emodnet_wfs(). explore available services Rstudio use:","code":"View(emodnet_wfs())"},{"path":"https://emodnet.github.io/EMODnetWFS/index.html","id":"create-service-client","dir":"","previous_headings":"","what":"Create Service Client","title":"Access EMODnet Web Feature Service data through R","text":"Create new WFS Client. Specify service using service argument.","code":"wfs_bio <- emodnet_init_wfs_client(service = \"biology\") #> Loading ISO 19139 XML schemas... #> Loading ISO 19115 codelists... #> Loading IANA mime types... #> No encoding supplied: defaulting to UTF-8. #> ✔ WFS client created successfully #> ℹ Service: 'https://geo.vliz.be/geoserver/Emodnetbio/wfs' #> ℹ Version: '2.0.0'  wfs_bio #> <WFSClient> #>   Inherits from: <OWSClient> #>   Public: #>     attrs: list #>     capabilities: WFSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     clone: function (deep = FALSE)  #>     defaults: list #>     describeFeatureType: function (typeName)  #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     ERROR: function (text)  #>     getCapabilities: function ()  #>     getCASUrl: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getConfig: function ()  #>     getFeatures: function (typeName, ...)  #>     getFeatureTypes: function (pretty = FALSE)  #>     getHeaders: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getPwd: function ()  #>     getToken: function ()  #>     getUrl: function ()  #>     getUser: function ()  #>     getVersion: function ()  #>     INFO: function (text)  #>     initialize: function (url, serviceVersion = NULL, user = NULL, pwd = NULL,  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     reloadCapabilities: function ()  #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wfs #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     version: 2.0.0 #>     WARN: function (text)  #>     wrap: FALSE #>   Private: #>     cas_url: NULL #>     config: request #>     fromComplexTypes: function (value)  #>     headers: EMODnetWFS R package https://github.com/EMODnet/EMODnetWFS #>     pwd: NULL #>     serviceName: WFS #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     token: NULL #>     user: NULL #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")"},{"path":"https://emodnet.github.io/EMODnetWFS/index.html","id":"get-wfs-layer-info","dir":"","previous_headings":"","what":"Get WFS Layer info","title":"Access EMODnet Web Feature Service data through R","text":"can get metadata layers available service. can pass wfs client object. can also get info specific layers wfs object: Finally, can get details available services layers server","code":"emodnet_get_wfs_info(service = \"biology\") #> ✔ WFS client created successfully #> ℹ Service: 'https://geo.vliz.be/geoserver/Emodnetbio/wfs' #> ℹ Version: '2.0.0' #> # A tibble: 33 × 9 #>    data_source service_name service…¹ layer…² layer…³ title abstr…⁴ class format #>    <chr>       <chr>        <chr>     <chr>   <chr>   <chr> <chr>   <chr> <chr>  #>  1 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Coral… WFSF… sf     #>  2 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Coral… WFSF… sf     #>  3 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Cymod… WFSF… sf     #>  4 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  5 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  6 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  7 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  8 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Halop… WFSF… sf     #>  9 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Maërl… WFSF… sf     #> 10 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Maërl… WFSF… sf     #> # … with 23 more rows, and abbreviated variable names ¹​service_url, #> #   ²​layer_namespace, ³​layer_name, ⁴​abstract emodnet_get_wfs_info(wfs_bio) #> # A tibble: 33 × 9 #>    data_source service_name service…¹ layer…² layer…³ title abstr…⁴ class format #>    <chr>       <chr>        <chr>     <chr>   <chr>   <chr> <chr>   <chr> <chr>  #>  1 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Coral… WFSF… sf     #>  2 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Coral… WFSF… sf     #>  3 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Cymod… WFSF… sf     #>  4 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  5 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  6 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  7 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  8 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Halop… WFSF… sf     #>  9 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Maërl… WFSF… sf     #> 10 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Maërl… WFSF… sf     #> # … with 23 more rows, and abbreviated variable names ¹​service_url, #> #   ²​layer_namespace, ³​layer_name, ⁴​abstract emodnet_get_wfs_info(wfs_bio) #> # A tibble: 33 × 9 #>    data_source service_name service…¹ layer…² layer…³ title abstr…⁴ class format #>    <chr>       <chr>        <chr>     <chr>   <chr>   <chr> <chr>   <chr> <chr>  #>  1 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Coral… WFSF… sf     #>  2 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Coral… WFSF… sf     #>  3 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Cymod… WFSF… sf     #>  4 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  5 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  6 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  7 emodnet_wfs biology      https://… Emodne… Specie… EMOD… \"This … WFSF… sf     #>  8 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Halop… WFSF… sf     #>  9 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Maërl… WFSF… sf     #> 10 emodnet_wfs biology      https://… Emodne… medise… EMOD… \"Maërl… WFSF… sf     #> # … with 23 more rows, and abbreviated variable names ¹​service_url, #> #   ²​layer_namespace, ³​layer_name, ⁴​abstract  layers <- c(\"mediseh_zostera_m_pnt\", \"mediseh_posidonia_nodata\")  emodnet_get_layer_info(wfs = wfs_bio, layers = layers) #> # A tibble: 2 × 9 #>   data_source service_name    servi…¹ layer…² layer…³ title abstr…⁴ class format #>   <chr>       <chr>           <chr>   <chr>   <chr>   <chr> <chr>   <chr> <chr>  #> 1 emodnet_wfs https://geo.vl… biology Emodne… medise… EMOD… \"Coast… WFSF… sf     #> 2 emodnet_wfs https://geo.vl… biology Emodne… medise… EMOD… \"Zoste… WFSF… sf     #> # … with abbreviated variable names ¹​service_url, ²​layer_namespace, #> #   ³​layer_name, ⁴​abstract emodnet_get_all_wfs_info()"},{"path":"https://emodnet.github.io/EMODnetWFS/index.html","id":"get-wfs-layers","dir":"","previous_headings":"","what":"Get WFS layers","title":"Access EMODnet Web Feature Service data through R","text":"can extract layers directly wfs object using layer names. layers downloaded sf objects output list named element layer requested. can change output crs argument crs. can also extract layers using WFS service name. Layers can also returned single sf object argument reduce_layers. TRUE function try reduce layers single sf. attempting reduce fails, return list warning: Using reduce_layers = TRUE also useful returning sf object rather list single layer request.","code":"emodnet_get_layers(wfs = wfs_bio, layers = layers) #> $mediseh_zostera_m_pnt #> Simple feature collection with 54 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -4.167154 ymin: 33.07782 xmax: 15.35766 ymax: 45.72451 #> Geodetic CRS:  WGS 84 #> First 10 features: #>                      gml_id id country                   the_geom #> 1   mediseh_zostera_m_pnt.1  0  Spagna  POINT (-2.61314 36.71681) #> 2   mediseh_zostera_m_pnt.2  0  Spagna POINT (-3.846598 36.75127) #> 3   mediseh_zostera_m_pnt.3  0  Spagna POINT (-3.957785 36.72266) #> 4   mediseh_zostera_m_pnt.4  0  Spagna POINT (-4.039712 36.74217) #> 5   mediseh_zostera_m_pnt.5  0  Spagna POINT (-4.100182 36.72331) #> 6   mediseh_zostera_m_pnt.6  0  Spagna POINT (-4.167154 36.71226) #> 7   mediseh_zostera_m_pnt.7  0  Spagna POINT (-1.268366 37.55797) #> 8   mediseh_zostera_m_pnt.8  0 Francia   POINT (4.84864 43.37637) #> 9   mediseh_zostera_m_pnt.9  0  Italia  POINT (13.71831 45.70017) #> 10 mediseh_zostera_m_pnt.10  0  Italia  POINT (13.16378 45.72451) #>  #> $mediseh_posidonia_nodata #> Simple feature collection with 465 features and 3 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -2.1798 ymin: 30.26623 xmax: 34.60767 ymax: 45.47668 #> Geodetic CRS:  WGS 84 #> First 10 features: #>                         gml_id id         km                       the_geom #> 1   mediseh_posidonia_nodata.1  0 291.503233 MULTICURVE (LINESTRING (27.... #> 2   mediseh_posidonia_nodata.2  0  75.379502 MULTICURVE (LINESTRING (23.... #> 3   mediseh_posidonia_nodata.3  0  38.627764 MULTICURVE (LINESTRING (22.... #> 4   mediseh_posidonia_nodata.4  0 110.344802 MULTICURVE (LINESTRING (19.... #> 5  mediseh_posidonia_nodata.13  0  66.997461 MULTICURVE (LINESTRING (9.1... #> 6  mediseh_posidonia_nodata.14  0  18.090640 MULTICURVE (LINESTRING (9.7... #> 7  mediseh_posidonia_nodata.15  0  16.618978 MULTICURVE (LINESTRING (9.8... #> 8  mediseh_posidonia_nodata.16  0   1.913773 MULTICURVE (LINESTRING (10.... #> 9  mediseh_posidonia_nodata.83  0   2.173447 MULTICURVE (LINESTRING (15.... #> 10 mediseh_posidonia_nodata.84  0   2.817453 MULTICURVE (LINESTRING (15.... emodnet_get_layers(wfs = wfs_bio, layers = layers, crs = 3857) #> ℹ crs transformed to 3857. #> ℹ crs transformed to 3857. #> $mediseh_zostera_m_pnt #> Simple feature collection with 54 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -463885.5 ymin: 3905638 xmax: 1709607 ymax: 5736311 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>                      gml_id id country                  the_geom #> 1   mediseh_zostera_m_pnt.1  0  Spagna POINT (-290893.4 4399707) #> 2   mediseh_zostera_m_pnt.2  0  Spagna POINT (-428201.3 4404494) #> 3   mediseh_zostera_m_pnt.3  0  Spagna POINT (-440578.6 4400520) #> 4   mediseh_zostera_m_pnt.4  0  Spagna POINT (-449698.7 4403229) #> 5   mediseh_zostera_m_pnt.5  0  Spagna POINT (-456430.2 4400610) #> 6   mediseh_zostera_m_pnt.6  0  Spagna POINT (-463885.5 4399075) #> 7   mediseh_zostera_m_pnt.7  0  Spagna POINT (-141193.9 4517168) #> 8   mediseh_zostera_m_pnt.8  0 Francia  POINT (539748.1 5369436) #> 9   mediseh_zostera_m_pnt.9  0  Italia   POINT (1527115 5732431) #> 10 mediseh_zostera_m_pnt.10  0  Italia   POINT (1465385 5736311) #>  #> $mediseh_posidonia_nodata #> Simple feature collection with 465 features and 3 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -242654.2 ymin: 3537818 xmax: 3852508 ymax: 5696879 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>                         gml_id id         km                       the_geom #> 1   mediseh_posidonia_nodata.1  0 291.503233 MULTICURVE (LINESTRING (302... #> 2   mediseh_posidonia_nodata.2  0  75.379502 MULTICURVE (LINESTRING (257... #> 3   mediseh_posidonia_nodata.3  0  38.627764 MULTICURVE (LINESTRING (246... #> 4   mediseh_posidonia_nodata.4  0 110.344802 MULTICURVE (LINESTRING (221... #> 5  mediseh_posidonia_nodata.13  0  66.997461 MULTICURVE (LINESTRING (101... #> 6  mediseh_posidonia_nodata.14  0  18.090640 MULTICURVE (LINESTRING (108... #> 7  mediseh_posidonia_nodata.15  0  16.618978 MULTICURVE (LINESTRING (110... #> 8  mediseh_posidonia_nodata.16  0   1.913773 MULTICURVE (LINESTRING (121... #> 9  mediseh_posidonia_nodata.83  0   2.173447 MULTICURVE (LINESTRING (169... #> 10 mediseh_posidonia_nodata.84  0   2.817453 MULTICURVE (LINESTRING (169... emodnet_get_layers(     service = \"biology\",     layers = c(\"mediseh_zostera_m_pnt\", \"mediseh_posidonia_nodata\") ) #> ✔ WFS client created successfully #> ℹ Service: 'https://geo.vliz.be/geoserver/Emodnetbio/wfs' #> ℹ Version: '2.0.0' #> $mediseh_zostera_m_pnt #> Simple feature collection with 54 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -4.167154 ymin: 33.07782 xmax: 15.35766 ymax: 45.72451 #> Geodetic CRS:  WGS 84 #> First 10 features: #>                      gml_id id country                   the_geom #> 1   mediseh_zostera_m_pnt.1  0  Spagna  POINT (-2.61314 36.71681) #> 2   mediseh_zostera_m_pnt.2  0  Spagna POINT (-3.846598 36.75127) #> 3   mediseh_zostera_m_pnt.3  0  Spagna POINT (-3.957785 36.72266) #> 4   mediseh_zostera_m_pnt.4  0  Spagna POINT (-4.039712 36.74217) #> 5   mediseh_zostera_m_pnt.5  0  Spagna POINT (-4.100182 36.72331) #> 6   mediseh_zostera_m_pnt.6  0  Spagna POINT (-4.167154 36.71226) #> 7   mediseh_zostera_m_pnt.7  0  Spagna POINT (-1.268366 37.55797) #> 8   mediseh_zostera_m_pnt.8  0 Francia   POINT (4.84864 43.37637) #> 9   mediseh_zostera_m_pnt.9  0  Italia  POINT (13.71831 45.70017) #> 10 mediseh_zostera_m_pnt.10  0  Italia  POINT (13.16378 45.72451) #>  #> $mediseh_posidonia_nodata #> Simple feature collection with 465 features and 3 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -2.1798 ymin: 30.26623 xmax: 34.60767 ymax: 45.47668 #> Geodetic CRS:  WGS 84 #> First 10 features: #>                         gml_id id         km                       the_geom #> 1   mediseh_posidonia_nodata.1  0 291.503233 MULTICURVE (LINESTRING (27.... #> 2   mediseh_posidonia_nodata.2  0  75.379502 MULTICURVE (LINESTRING (23.... #> 3   mediseh_posidonia_nodata.3  0  38.627764 MULTICURVE (LINESTRING (22.... #> 4   mediseh_posidonia_nodata.4  0 110.344802 MULTICURVE (LINESTRING (19.... #> 5  mediseh_posidonia_nodata.13  0  66.997461 MULTICURVE (LINESTRING (9.1... #> 6  mediseh_posidonia_nodata.14  0  18.090640 MULTICURVE (LINESTRING (9.7... #> 7  mediseh_posidonia_nodata.15  0  16.618978 MULTICURVE (LINESTRING (9.8... #> 8  mediseh_posidonia_nodata.16  0   1.913773 MULTICURVE (LINESTRING (10.... #> 9  mediseh_posidonia_nodata.83  0   2.173447 MULTICURVE (LINESTRING (15.... #> 10 mediseh_posidonia_nodata.84  0   2.817453 MULTICURVE (LINESTRING (15.... emodnet_get_layers(     wfs = wfs_bio,      layers = layers,     reduce_layers = TRUE ) #> Error: Cannot reduce layers. #> Try again with `reduce_layers = FALSE` emodnet_get_layers(     service = \"biology\",     layers = c(\"mediseh_posidonia_nodata\"),      reduce_layers = TRUE ) #> ✔ WFS client created successfully #> ℹ Service: 'https://geo.vliz.be/geoserver/Emodnetbio/wfs' #> ℹ Version: '2.0.0' #> Simple feature collection with 465 features and 3 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -2.1798 ymin: 30.26623 xmax: 34.60767 ymax: 45.47668 #> Geodetic CRS:  WGS 84 #> First 10 features: #>                         gml_id id         km                       the_geom #> 1   mediseh_posidonia_nodata.1  0 291.503233 MULTICURVE (LINESTRING (27.... #> 2   mediseh_posidonia_nodata.2  0  75.379502 MULTICURVE (LINESTRING (23.... #> 3   mediseh_posidonia_nodata.3  0  38.627764 MULTICURVE (LINESTRING (22.... #> 4   mediseh_posidonia_nodata.4  0 110.344802 MULTICURVE (LINESTRING (19.... #> 5  mediseh_posidonia_nodata.13  0  66.997461 MULTICURVE (LINESTRING (9.1... #> 6  mediseh_posidonia_nodata.14  0  18.090640 MULTICURVE (LINESTRING (9.7... #> 7  mediseh_posidonia_nodata.15  0  16.618978 MULTICURVE (LINESTRING (9.8... #> 8  mediseh_posidonia_nodata.16  0   1.913773 MULTICURVE (LINESTRING (10.... #> 9  mediseh_posidonia_nodata.83  0   2.173447 MULTICURVE (LINESTRING (15.... #> 10 mediseh_posidonia_nodata.84  0   2.817453 MULTICURVE (LINESTRING (15...."},{"path":"https://emodnet.github.io/EMODnetWFS/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Access EMODnet Web Feature Service data through R","text":"cite EMODnetWFS, please use output citation(package = \"EMODnetWFS\").","code":"citation(package = \"EMODnetWFS\") #>  #> To cite package 'EMODnetWFS' in publications use: #>  #>   Krystalli A, Fernández-Bejarano S, Salmon M (????). _EMODnetWFS: #>   Access EMODnet Web Feature Service data through R_. R package version #>   2.0.1.9001. Integrated data products created under the European #>   Marine Observation Data Network (EMODnet) Biology project #>   (EASME/EMFF/2017/1.3.1.2/02/SI2.789013), funded by the by the #>   European Union under Regulation (EU) No 508/2014 of the European #>   Parliament and of the Council of 15 May 2014 on the European Maritime #>   and Fisheries Fund, <https://github.com/EMODnet/EMODnetWFS>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {{EMODnetWFS}: Access EMODnet Web Feature Service data through R}, #>     author = {Anna Krystalli and Salvador Fernández-Bejarano and Maëlle Salmon}, #>     note = {R package version 2.0.1.9001. Integrated data products created under the European Marine Observation Data Network (EMODnet) Biology project (EASME/EMFF/2017/1.3.1.2/02/SI2.789013), funded by the by the European Union under Regulation (EU) No 508/2014 of the European Parliament and of the Council of 15 May 2014 on the European Maritime and Fisheries Fund}, #>     url = {https://github.com/EMODnet/EMODnetWFS}, #>   }"},{"path":"https://emodnet.github.io/EMODnetWFS/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Access EMODnet Web Feature Service data through R","text":"package started Sheffield University EMODnet Biology WP4 data products workshop June 2020. can read product story EMODnet-Biology portal","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/EMODnetWFS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"EMODnetWFS: Access EMODnet Web Feature Service data through R — EMODnetWFS-package","title":"EMODnetWFS: Access EMODnet Web Feature Service data through R — EMODnetWFS-package","text":"Access interrogate EMODnet Web Feature Service data R.","code":""},{"path":[]},{"path":"https://emodnet.github.io/EMODnetWFS/reference/EMODnetWFS-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EMODnetWFS: Access EMODnet Web Feature Service data through R — EMODnetWFS-package","text":"Maintainer: Salvador Fernández-Bejarano salvador.fernandez@vliz.(ORCID) [contributor] Authors: Anna Krystalli annakrystalli@googlemail.com (ORCID) Maëlle Salmon msmaellesalmon@gmail.com (ORCID) contributors: Thomas J Webb t.j.webb@sheffield.ac.uk [contributor] European Marine Observation Data Network (EMODnet) Biology project European Commission's Directorate - General Maritime Affairs Fisheries (DG MARE) bio@emodnet.eu [copyright holder] VLIZ (VLAAMS INSTITUUT VOOR DE ZEE) info@vliz.[funder]","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_layers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get EMODnet WFS layers — emodnet_get_layers","title":"Get EMODnet WFS layers — emodnet_get_layers","text":"Performs WFS getFeature request layers wfs object specified EMODnet Service. Filtering layer features can also handled via ECQL language filters.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_layers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get EMODnet WFS layers — emodnet_get_layers","text":"","code":"emodnet_get_layers(   wfs = NULL,   service = NULL,   service_version = NULL,   layers,   crs = NULL,   cql_filter = NULL,   reduce_layers = FALSE,   suppress_warnings = FALSE,   ... )"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_layers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get EMODnet WFS layers — emodnet_get_layers","text":"wfs WFSClient R6 object methods interfacing OGC Web Feature Service. service EMODnet OGC WFS service name. available services, see emodnet_wfs(). service_version WFS service version. Now always \"2.0.0\". layers character vector layer names. get info layers, including layer_name use emodnet_get_wfs_info(). crs integer. EPSG code output crs. NULL (default), layers returned original crs. cql_filter character. Features returned can filtered using valid Extended Common Query Language (ECQL) filtering statements (https://docs.geoserver.org/stable/en/user/filter/ecql_reference.html). one : character string character vector length 1. Filter recycled across layers requested character vector length equal length layers. Filter matched layers sequentially. Elements containing NA ignored named character vector. filter applied layer corresponding filter name. Filters names correspond layers ignored. Layers without corresponding filters returned whole reduce_layers whether reduce output layers single sf object. suppress_warnings logical. Whether suppress messages layer download failures. ... additional vendor parameter arguments passed ows4R::GetFeature(). example, including count=1 returns first available feature.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_layers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get EMODnet WFS layers — emodnet_get_layers","text":"reduce_layers = FALSE (default), list sf objects, one element layer. layers download unsuccessful NULL. reduce_layers = TRUE, layers reduced (possible) single sf containing data layers. NULL layers ignored. reduce_layers = TRUE can also used return sf single layer request instead list length 1.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_layers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get EMODnet WFS layers — emodnet_get_layers","text":"","code":"# \\dontrun{ # Layers as character vector emodnet_get_layers(   service = \"seabed_habitats_individual_habitat_map_and_model_datasets\",   layers = c(\"dk003069\", \"dk003070\") ) #> Loading ISO 19139 XML schemas... #> Loading ISO 19115 codelists... #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-seabedhabitats.eu/geoserver/emodnet_open_maplibrary/wfs\" #> ℹ Version: \"2.0.0\" #> $dk003069 #> Simple feature collection with 82 features and 8 fields #> Geometry type: MULTISURFACE #> Dimension:     XY #> Bounding box:  xmin: 1065918 ymin: 7318084 xmax: 1140377 ymax: 7385447 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>            gml_id   gid      gui polygon annexi         subtype confidence #> 1  dk003069.39844 39844 DK003069      61   1170 Geogenic origin       High #> 2  dk003069.39855 39855 DK003069      72   1110            <NA>       High #> 3  dk003069.39860 39860 DK003069      77   1110            <NA>       High #> 4  dk003069.39861 39861 DK003069      78   1110            <NA>       High #> 5  dk003069.39785 39785 DK003069       2   1170 Geogenic origin       High #> 6  dk003069.39814 39814 DK003069      31   1170 Geogenic origin       High #> 7  dk003069.39791 39791 DK003069       8   1170 Geogenic origin       High #> 8  dk003069.39836 39836 DK003069      53   1170 Geogenic origin       High #> 9  dk003069.39829 39829 DK003069      46   1170 Geogenic origin       High #> 10 dk003069.39850 39850 DK003069      67   1110            <NA>       High #>    val_comm                           geom #> 1      <NA> MULTISURFACE (POLYGON ((111... #> 2      <NA> MULTISURFACE (POLYGON ((108... #> 3      <NA> MULTISURFACE (POLYGON ((111... #> 4      <NA> MULTISURFACE (POLYGON ((108... #> 5      <NA> MULTISURFACE (POLYGON ((111... #> 6      <NA> MULTISURFACE (POLYGON ((111... #> 7      <NA> MULTISURFACE (POLYGON ((109... #> 8      <NA> MULTISURFACE (POLYGON ((108... #> 9      <NA> MULTISURFACE (POLYGON ((108... #> 10     <NA> MULTISURFACE (POLYGON ((111... #>  #> $dk003070 #> Simple feature collection with 30 features and 8 fields #> Geometry type: MULTISURFACE #> Dimension:     XY #> Bounding box:  xmin: 1268645 ymin: 7276003 xmax: 1332262 ymax: 7290836 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>            gml_id   gid      gui polygon annexi         subtype confidence #> 1  dk003070.39889 39889 DK003070      24   1170 Geogenic origin       High #> 2  dk003070.39888 39888 DK003070      23   1170 Geogenic origin       High #> 3  dk003070.39883 39883 DK003070      18   1170 Geogenic origin       High #> 4  dk003070.39892 39892 DK003070      27   1170 Geogenic origin       High #> 5  dk003070.39876 39876 DK003070      11   1170 Geogenic origin       High #> 6  dk003070.39880 39880 DK003070      15   1170 Geogenic origin       High #> 7  dk003070.39869 39869 DK003070       4   1170 Geogenic origin       High #> 8  dk003070.39866 39866 DK003070       1   1170 Geogenic origin       High #> 9  dk003070.39884 39884 DK003070      19   1170 Geogenic origin       High #> 10 dk003070.39894 39894 DK003070      29   1170 Geogenic origin       High #>    val_comm                           geom #> 1      <NA> MULTISURFACE (POLYGON ((132... #> 2      <NA> MULTISURFACE (POLYGON ((129... #> 3      <NA> MULTISURFACE (POLYGON ((128... #> 4      <NA> MULTISURFACE (POLYGON ((133... #> 5      <NA> MULTISURFACE (POLYGON ((130... #> 6      <NA> MULTISURFACE (POLYGON ((130... #> 7      <NA> MULTISURFACE (POLYGON ((127... #> 8      <NA> MULTISURFACE (POLYGON ((127... #> 9      <NA> MULTISURFACE (POLYGON ((130... #> 10     <NA> MULTISURFACE (POLYGON ((132... #>   # Layers as character vector, layers to be reduced emodnet_get_layers(   service = \"seabed_habitats_individual_habitat_map_and_model_datasets\",   layers = c(\"dk003069\", \"dk003070\"),   reduce_layers = TRUE ) #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-seabedhabitats.eu/geoserver/emodnet_open_maplibrary/wfs\" #> ℹ Version: \"2.0.0\" #> Simple feature collection with 112 features and 8 fields #> Geometry type: MULTISURFACE #> Dimension:     XY #> Bounding box:  xmin: 1065918 ymin: 7276003 xmax: 1332262 ymax: 7385447 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>            gml_id   gid      gui polygon annexi         subtype confidence #> 1  dk003069.39844 39844 DK003069      61   1170 Geogenic origin       High #> 2  dk003069.39855 39855 DK003069      72   1110            <NA>       High #> 3  dk003069.39860 39860 DK003069      77   1110            <NA>       High #> 4  dk003069.39861 39861 DK003069      78   1110            <NA>       High #> 5  dk003069.39785 39785 DK003069       2   1170 Geogenic origin       High #> 6  dk003069.39814 39814 DK003069      31   1170 Geogenic origin       High #> 7  dk003069.39791 39791 DK003069       8   1170 Geogenic origin       High #> 8  dk003069.39836 39836 DK003069      53   1170 Geogenic origin       High #> 9  dk003069.39829 39829 DK003069      46   1170 Geogenic origin       High #> 10 dk003069.39850 39850 DK003069      67   1110            <NA>       High #>    val_comm                           geom #> 1      <NA> MULTISURFACE (POLYGON ((111... #> 2      <NA> MULTISURFACE (POLYGON ((108... #> 3      <NA> MULTISURFACE (POLYGON ((111... #> 4      <NA> MULTISURFACE (POLYGON ((108... #> 5      <NA> MULTISURFACE (POLYGON ((111... #> 6      <NA> MULTISURFACE (POLYGON ((111... #> 7      <NA> MULTISURFACE (POLYGON ((109... #> 8      <NA> MULTISURFACE (POLYGON ((108... #> 9      <NA> MULTISURFACE (POLYGON ((108... #> 10     <NA> MULTISURFACE (POLYGON ((111...  # Usage of cql_filter emodnet_get_layers(   service = \"human_activities\",   layers = \"maritimebnds\",   cql_filter = \"sitename='Territory sea (12 nm)'\",   reduce_layers = TRUE ) #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-humanactivities.eu/wfs\" #> ℹ Version: \"2.0.0\" #> Simple feature collection with 64 features and 12 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: -178.3897 ymin: -50.21866 xmax: 169.1762 ymax: 83.8746 #> Geodetic CRS:  WGS 84 #> First 10 features: #>             gml_id objectid mblszotpid localid              sitename legalfound #> 1  maritimebnds.54       54          1   49036 Territory sea (12 nm)       <NA> #> 2  maritimebnds.55       55          1   49042 Territory sea (12 nm)       <NA> #> 3  maritimebnds.56       56          1   49063 Territory sea (12 nm)       <NA> #> 4  maritimebnds.57       57          1   49064 Territory sea (12 nm)       <NA> #> 5  maritimebnds.58       58          1   49065 Territory sea (12 nm)       <NA> #> 6  maritimebnds.59       59          1   49066 Territory sea (12 nm)       <NA> #> 7  maritimebnds.60       60          1   49087 Territory sea (12 nm)       <NA> #> 8  maritimebnds.61       61          1   49099 Territory sea (12 nm)       <NA> #> 9  maritimebnds.62       62          1   49101 Territory sea (12 nm)       <NA> #> 10 maritimebnds.63       63          1   49102 Territory sea (12 nm)       <NA> #>    legalfou_1        country nationalle nutscode               mblsds_mbl #> 1        <NA> United Kingdom       <NA>       UK In www.marineregions.org #> 2        <NA>         France       <NA>       FR In www.marineregions.org #> 3        <NA>         France       <NA>       FR In www.marineregions.org #> 4        <NA>         France       <NA>       FR In www.marineregions.org #> 5        <NA>         France       <NA>       FR In www.marineregions.org #> 6        <NA>         France       <NA>       FR In www.marineregions.org #> 7        <NA>          Spain       <NA>       ES In www.marineregions.org #> 8        <NA>         Cyprus       <NA>       CY In www.marineregions.org #> 9        <NA> United Kingdom       <NA>       UK In www.marineregions.org #> 10       <NA> United Kingdom       <NA>       UK In www.marineregions.org #>    shape_leng                       the_geom #> 1  141.545470 MULTICURVE (LINESTRING (-13... #> 2   70.017156 MULTICURVE (LINESTRING (169... #> 3    5.116398 MULTICURVE (LINESTRING (55.... #> 4    1.949563 MULTICURVE (LINESTRING (42.... #> 5    2.072975 MULTICURVE (LINESTRING (39.... #> 6    1.837879 MULTICURVE (LINESTRING (40.... #> 7   27.878496 MULTICURVE (LINESTRING (-17... #> 8   13.642806 MULTICURVE (LINESTRING (34.... #> 9    2.046192 MULTICURVE (LINESTRING (-14... #> 10   2.259654 MULTICURVE (LINESTRING (-5.... # Usage of vendor parameter emodnet_get_layers(   service = \"human_activities\",   layers = \"maritimebnds\",   count = 1,   reduce_layers = TRUE ) #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-humanactivities.eu/wfs\" #> ℹ Version: \"2.0.0\" #> Simple feature collection with 1 feature and 12 fields #> Geometry type: MULTICURVE #> Dimension:     XY #> Bounding box:  xmin: 6.6236 ymin: 52.87112 xmax: 14.04677 ymax: 55.0804 #> Geodetic CRS:  WGS 84 #>           gml_id objectid mblszotpid localid        sitename legalfound #> 1 maritimebnds.1        1          7   49469 Internal waters       <NA> #>   legalfou_1 country nationalle nutscode               mblsds_mbl shape_leng #> 1       <NA> Germany       <NA>       DE In www.marineregions.org    54.8404 #>                         the_geom #> 1 MULTICURVE (LINESTRING (11.... # }"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_wfs_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get WFS available layer information — emodnet_get_layer_info","title":"Get WFS available layer information — emodnet_get_layer_info","text":"Get WFS available layer information","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_wfs_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get WFS available layer information — emodnet_get_layer_info","text":"","code":"emodnet_get_layer_info(wfs, layers)  emodnet_get_wfs_info(wfs = NULL, service = NULL, service_version = NULL)  emodnet_get_all_wfs_info()"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_wfs_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get WFS available layer information — emodnet_get_layer_info","text":"wfs WFSClient R6 object methods interfacing OGC Web Feature Service. layers character vector layer names. get info layers, including layer_name use emodnet_get_wfs_info(). service EMODnet OGC WFS service name. available services, see emodnet_wfs(). service_version WFS service version. Now always \"2.0.0\".","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_wfs_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get WFS available layer information — emodnet_get_layer_info","text":"tibble containing metadata layer available service.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_wfs_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get WFS available layer information — emodnet_get_layer_info","text":"minimize number requests sent webservices, functions use memoise cache results inside active R session. clear cache, re-start R run memoise::forget(emodnet_get_wfs_info)/memoise::forget(emodnet_get_layer_info).","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_wfs_info.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get WFS available layer information — emodnet_get_layer_info","text":"emodnet_get_layer_info(): Get metadata specific layers. Requires wfs object input. emodnet_get_wfs_info(): Get info layers EMODnet WFS service. emodnet_get_all_wfs_info(): Get metadata layers available services server.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_get_wfs_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get WFS available layer information — emodnet_get_layer_info","text":"","code":"# \\dontrun{ emodnet_get_wfs_info(service = \"bathymetry\") #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-bathymetry.eu/wfs\" #> ℹ Version: \"2.0.0\" #> # A tibble: 7 × 9 #> # Rowwise:  #>   data_source service_name service_…¹ layer…² title abstr…³ class format layer…⁴ #>   <chr>       <chr>        <chr>      <chr>   <chr> <chr>   <chr> <chr>  <chr>   #> 1 emodnet_wfs bathymetry   https://o… downlo… Bath… \"Downl… WFSF… sf     emodnet #> 2 emodnet_wfs bathymetry   https://o… contou… Dept… \"Gener… WFSF… sf     emodnet #> 3 emodnet_wfs bathymetry   https://o… hr_bat… High… \"Layer… WFSF… sf     emodnet #> 4 emodnet_wfs bathymetry   https://o… qualit… Qual… \"Repre… WFSF… sf     emodnet #> 5 emodnet_wfs bathymetry   https://o… sea_na… Sea … \"Maint… WFSF… sf     world   #> 6 emodnet_wfs bathymetry   https://o… source… Sour… \"Cover… WFSF… sf     emodnet #> 7 emodnet_wfs bathymetry   https://o… unders… unde… \"\"      WFSF… sf     gebco   #> # … with abbreviated variable names ¹​service_url, ²​layer_name, ³​abstract, #> #   ⁴​layer_namespace # Query a wfs object wfs_cml <- emodnet_init_wfs_client(\"chemistry_marine_litter\") #> ✔ WFS client created successfully #> ℹ Service: \"https://www.ifremer.fr/services/wfs/emodnet_chemistry2\" #> ℹ Version: \"2.0.0\" emodnet_get_wfs_info(wfs_cml) #> # A tibble: 24 × 9 #> # Rowwise:  #>    data_source service_name   servi…¹ layer…² title abstr…³ class format layer…⁴ #>    <chr>       <chr>          <chr>   <chr>   <chr> <chr>   <chr> <chr>  <chr>   #>  1 emodnet_wfs chemistry_mar… https:… bl_bea… Beac… \"\"      WFSF… sf     ms      #>  2 emodnet_wfs chemistry_mar… https:… bl_tem… Beac… \"\"      WFSF… sf     ms      #>  3 emodnet_wfs chemistry_mar… https:… bl_tot… Beac… \"\"      WFSF… sf     ms      #>  4 emodnet_wfs chemistry_mar… https:… bl_tot… Beac… \"\"      WFSF… sf     ms      #>  5 emodnet_wfs chemistry_mar… https:… bl_mat… Beac… \"\"      WFSF… sf     ms      #>  6 emodnet_wfs chemistry_mar… https:… bl_cig… Beac… \"\"      WFSF… sf     ms      #>  7 emodnet_wfs chemistry_mar… https:… bl_cig… Beac… \"\"      WFSF… sf     ms      #>  8 emodnet_wfs chemistry_mar… https:… bl_fis… Beac… \"\"      WFSF… sf     ms      #>  9 emodnet_wfs chemistry_mar… https:… bl_pla… Beac… \"\"      WFSF… sf     ms      #> 10 emodnet_wfs chemistry_mar… https:… bl_sin… Beac… \"\"      WFSF… sf     ms      #> # … with 14 more rows, and abbreviated variable names ¹​service_url, #> #   ²​layer_name, ³​abstract, ⁴​layer_namespace # Get info for specific layers from wfs object layers <- c(   \"bl_fishing_monitoring\",   \"bl_beacheslocations_monitoring\" ) emodnet_get_layer_info(wfs = wfs_cml, layers = layers) #> # A tibble: 2 × 9 #> # Rowwise:  #>   data_source service_name    servi…¹ layer…² title abstr…³ class format layer…⁴ #>   <chr>       <chr>           <chr>   <chr>   <chr> <chr>   <chr> <chr>  <chr>   #> 1 emodnet_wfs https://www.if… chemis… bl_bea… Beac… \"\"      WFSF… sf     ms      #> 2 emodnet_wfs https://www.if… chemis… bl_fis… Beac… \"\"      WFSF… sf     ms      #> # … with abbreviated variable names ¹​service_url, ²​layer_name, ³​abstract, #> #   ⁴​layer_namespace # }"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_init_wfs_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise an EMODnet WFS client — emodnet_init_wfs_client","title":"Initialise an EMODnet WFS client — emodnet_init_wfs_client","text":"Initialise EMODnet WFS client","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_init_wfs_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise an EMODnet WFS client — emodnet_init_wfs_client","text":"","code":"emodnet_init_wfs_client(service, service_version = NULL, logger = NULL)"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_init_wfs_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise an EMODnet WFS client — emodnet_init_wfs_client","text":"service EMODnet OGC WFS service name. available services, see emodnet_wfs(). service_version WFS service version. Now always \"2.0.0\". logger logger. Either NULL (logging info), \"INFO\" (log ows4R requests) \"DEBUG\" (including curl details).","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_init_wfs_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialise an EMODnet WFS client — emodnet_init_wfs_client","text":"ows4R::WFSClient R6 object methods interfacing OGC Web Feature Service.","code":""},{"path":[]},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_init_wfs_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialise an EMODnet WFS client — emodnet_init_wfs_client","text":"","code":"# \\dontrun{ wfs <- emodnet_init_wfs_client(service = \"bathymetry\") #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-bathymetry.eu/wfs\" #> ℹ Version: \"2.0.0\" # }"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_wfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Available EMODnet Web Feature Services — emodnet_wfs","title":"Available EMODnet Web Feature Services — emodnet_wfs","text":"Available EMODnet Web Feature Services","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_wfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available EMODnet Web Feature Services — emodnet_wfs","text":"","code":"emodnet_wfs()"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_wfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available EMODnet Web Feature Services — emodnet_wfs","text":"Tibble available EMODnet Web Feature Services","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/emodnet_wfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Available EMODnet Web Feature Services — emodnet_wfs","text":"","code":"emodnet_wfs() #>                                                       service_name #> 1                                                       bathymetry #> 2                                                          biology #> 3                                          biology_occurrence_data #> 4                  chemistry_cdi_data_discovery_and_access_service #> 5  chemistry_cdi_distribution_observations_per_category_and_region #> 6                                           chemistry_contaminants #> 7                                          chemistry_marine_litter #> 8                                         geology_coastal_behavior #> 9                                 geology_events_and_probabilities #> 10                                         geology_marine_minerals #> 11                                       geology_sea_floor_bedrock #> 12                                   geology_seabed_substrate_maps #> 13                                    geology_submerged_landscapes #> 14                                                human_activities #> 15                                                         physics #> 16                   seabed_habitats_general_datasets_and_products #> 17       seabed_habitats_individual_habitat_map_and_model_datasets #>                                                                    service_url #> 1                                        https://ows.emodnet-bathymetry.eu/wfs #> 2                                 https://geo.vliz.be/geoserver/Emodnetbio/wfs #> 3                                 https://geo.vliz.be/geoserver/Dataportal/wfs #> 4                           https://geo-service.maris.nl/emodnet_chemistry/wfs #> 5                       https://geo-service.maris.nl/emodnet_chemistry_p36/wfs #> 6                       https://nodc.ogs.trieste.it/geoserver/Contaminants/wfs #> 7                       https://www.ifremer.fr/services/wfs/emodnet_chemistry2 #> 8                           https://drive.emodnet-geology.eu/geoserver/tno/wfs #> 9                         https://drive.emodnet-geology.eu/geoserver/ispra/wfs #> 10                          https://drive.emodnet-geology.eu/geoserver/gsi/wfs #> 11                          https://drive.emodnet-geology.eu/geoserver/bgr/wfs #> 12                          https://drive.emodnet-geology.eu/geoserver/gtk/wfs #> 13                          https://drive.emodnet-geology.eu/geoserver/bgs/wfs #> 14                                  https://ows.emodnet-humanactivities.eu/wfs #> 15                     https://prod-geoserver.emodnet-physics.eu/geoserver/ows #> 16            https://ows.emodnet-seabedhabitats.eu/geoserver/emodnet_open/wfs #> 17 https://ows.emodnet-seabedhabitats.eu/geoserver/emodnet_open_maplibrary/wfs"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attribute_descriptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get layer attribute description — layer_attribute_descriptions","title":"Get layer attribute description — layer_attribute_descriptions","text":"Get layer attribute description","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attribute_descriptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get layer attribute description — layer_attribute_descriptions","text":"","code":"layer_attribute_descriptions(   wfs = NULL,   service = NULL,   service_version = NULL,   layer )"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attribute_descriptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get layer attribute description — layer_attribute_descriptions","text":"wfs WFSClient R6 object methods interfacing OGC Web Feature Service. service EMODnet OGC WFS service name. available services, see emodnet_wfs(). service_version WFS service version. Now always \"2.0.0\". layer character sting layer name. get info layers, including layer_name use emodnet_get_wfs_info().","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attribute_descriptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get layer attribute description — layer_attribute_descriptions","text":"data.frame containing layer attribute descriptions (metadata).","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attribute_descriptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get layer attribute description — layer_attribute_descriptions","text":"","code":"# \\dontrun{ layer_attribute_descriptions(service = \"human_activities\", layer = \"maritimebnds\") #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-humanactivities.eu/wfs\" #> ℹ Version: \"2.0.0\" #>          name       type minOccurs maxOccurs nillable geometry #> 1    objectid    numeric         0         1     TRUE    FALSE #> 2  mblszotpid    integer         0         1     TRUE    FALSE #> 3     localid    numeric         0         1     TRUE    FALSE #> 4    sitename  character         0         1     TRUE    FALSE #> 5  legalfound       Date         0         1     TRUE    FALSE #> 6  legalfou_1  character         0         1     TRUE    FALSE #> 7     country  character         0         1     TRUE    FALSE #> 8  nationalle  character         0         1     TRUE    FALSE #> 9    nutscode  character         0         1     TRUE    FALSE #> 10 mblsds_mbl  character         0         1     TRUE    FALSE #> 11 shape_leng     double         0         1     TRUE    FALSE #> 12   the_geom MultiCurve         0         1     TRUE     TRUE # }"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attribute_inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect layer attributes — layer_attribute_inspect","title":"Inspect layer attributes — layer_attribute_inspect","text":"Inspect layer attributes","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attribute_inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect layer attributes — layer_attribute_inspect","text":"","code":"layer_attribute_inspect(   wfs = NULL,   service = NULL,   service_version = NULL,   layer,   attribute )"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attribute_inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect layer attributes — layer_attribute_inspect","text":"wfs WFSClient R6 object methods interfacing OGC Web Feature Service. service EMODnet OGC WFS service name. available services, see emodnet_wfs(). service_version WFS service version. Now always \"2.0.0\". layer character sting layer name. get info layers, including layer_name use emodnet_get_wfs_info(). attribute character string, name layer attribute (variable). Use layer_attributes_get_names() get layer attribute names.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attribute_inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect layer attributes — layer_attribute_inspect","text":"Detailed summary individual attribute (variable). Particularly useful inspecting factor character variable levels unique values.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attribute_inspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect layer attributes — layer_attribute_inspect","text":"","code":"# \\dontrun{ wfs <- emodnet_init_wfs_client(service = \"human_activities\") #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-humanactivities.eu/wfs\" #> ℹ Version: \"2.0.0\" layer_attributes_get_names(wfs, layer = \"maritimebnds\") #>  [1] \"objectid\"   \"mblszotpid\" \"localid\"    \"sitename\"   \"legalfound\" #>  [6] \"legalfou_1\" \"country\"    \"nationalle\" \"nutscode\"   \"mblsds_mbl\" #> [11] \"shape_leng\" \"the_geom\"   layer_attribute_inspect(wfs, layer = \"maritimebnds\", attribute = \"sitename\") #> # A tibble: 9 × 3 #>   .                                                            n percent #>   <chr>                                                    <int>   <dbl> #> 1 Baseline                                                   486  0.464  #> 2 Contiguous zone (24 nm)                                     65  0.0621 #> 3 Continental Shelf                                           78  0.0745 #> 4 Delimitation line between states                           211  0.202  #> 5 Exclusive Economic Zone (200 nm) EEZ                        68  0.0649 #> 6 Exclusive Economic Zone (200 nm) EEZ - Median Line          23  0.0220 #> 7 Exclusive Economic Zone (200 nm) EEZ - Overlapping claim    14  0.0134 #> 8 Internal waters                                             38  0.0363 #> 9 Territory sea (12 nm)                                       64  0.0611 # }"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_get_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of layer attributes — layer_attributes_get_names","title":"Get names of layer attributes — layer_attributes_get_names","text":"Get names layer attributes","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_get_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of layer attributes — layer_attributes_get_names","text":"","code":"layer_attributes_get_names(   wfs = NULL,   service = NULL,   service_version = NULL,   layer )"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_get_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of layer attributes — layer_attributes_get_names","text":"wfs WFSClient R6 object methods interfacing OGC Web Feature Service. service EMODnet OGC WFS service name. available services, see emodnet_wfs(). service_version WFS service version. Now always \"2.0.0\". layer character sting layer name. get info layers, including layer_name use emodnet_get_wfs_info().","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_get_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of layer attributes — layer_attributes_get_names","text":"character vector layer attribute (variable) names.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_get_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get names of layer attributes — layer_attributes_get_names","text":"","code":"# \\dontrun{ layer_attributes_get_names(service = \"human_activities\", layer = \"maritimebnds\") #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-humanactivities.eu/wfs\" #> ℹ Version: \"2.0.0\" #>  [1] \"objectid\"   \"mblszotpid\" \"localid\"    \"sitename\"   \"legalfound\" #>  [6] \"legalfou_1\" \"country\"    \"nationalle\" \"nutscode\"   \"mblsds_mbl\" #> [11] \"shape_leng\" \"the_geom\"   # }"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_summarise.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summaries of layer attributes (variables) — layer_attributes_summarise","title":"Get summaries of layer attributes (variables) — layer_attributes_summarise","text":"Get summaries layer attributes (variables)","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_summarise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summaries of layer attributes (variables) — layer_attributes_summarise","text":"","code":"layer_attributes_summarise(   wfs = NULL,   service = NULL,   service_version = NULL,   layer )"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_summarise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summaries of layer attributes (variables) — layer_attributes_summarise","text":"wfs WFSClient R6 object methods interfacing OGC Web Feature Service. service EMODnet OGC WFS service name. available services, see emodnet_wfs(). service_version WFS service version. Now always \"2.0.0\". layer character sting layer name. get info layers, including layer_name use emodnet_get_wfs_info().","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_summarise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summaries of layer attributes (variables) — layer_attributes_summarise","text":"output summary() attributes (variables) given layer given service.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_summarise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get summaries of layer attributes (variables) — layer_attributes_summarise","text":"","code":"# \\dontrun{ layer_attributes_summarise(service = \"human_activities\", layer = \"maritimebnds\") #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-humanactivities.eu/wfs\" #> ℹ Version: \"2.0.0\" #>     gml_id             objectid        mblszotpid       localid        #>  Length:1047        Min.   :   1.0   Min.   :0.000   Min.   :    0.0   #>  Class :character   1st Qu.: 262.5   1st Qu.:0.000   1st Qu.:  346.5   #>  Mode  :character   Median : 524.0   Median :1.000   Median : 1745.0   #>                     Mean   : 524.0   Mean   :1.729   Mean   : 9194.2   #>                     3rd Qu.: 785.5   3rd Qu.:3.000   3rd Qu.: 3751.5   #>                     Max.   :1047.0   Max.   :7.000   Max.   :62595.0   #>                                                                        #>    sitename           legalfound          legalfou_1          country          #>  Length:1047        Min.   :1932-01-30   Length:1047        Length:1047        #>  Class :character   1st Qu.:1984-11-15   Class :character   Class :character   #>  Mode  :character   Median :2004-12-06   Mode  :character   Mode  :character   #>                     Mean   :1999-12-03                                         #>                     3rd Qu.:2012-12-27                                         #>                     Max.   :2019-09-29                                         #>                     NA's   :221                                                #>   nationalle          nutscode          mblsds_mbl          shape_leng        #>  Length:1047        Length:1047        Length:1047        Min.   :   0.0000   #>  Class :character   Class :character   Class :character   1st Qu.:   0.0830   #>  Mode  :character   Mode  :character   Mode  :character   Median :   0.5588   #>                                                           Mean   :  13.3151   #>                                                           3rd Qu.:   4.1114   #>                                                           Max.   :1804.3286   #>                                                                               # }"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get layer attribute values tibble — layer_attributes_tbl","title":"Get layer attribute values tibble — layer_attributes_tbl","text":"Get layer attribute values tibble","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get layer attribute values tibble — layer_attributes_tbl","text":"","code":"layer_attributes_tbl(wfs = NULL, service = NULL, service_version = NULL, layer)"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get layer attribute values tibble — layer_attributes_tbl","text":"wfs WFSClient R6 object methods interfacing OGC Web Feature Service. service EMODnet OGC WFS service name. available services, see emodnet_wfs(). service_version WFS service version. Now always \"2.0.0\". layer character sting layer name. get info layers, including layer_name use emodnet_get_wfs_info().","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get layer attribute values tibble — layer_attributes_tbl","text":"tibble layer attribute (variable) values geometry column removed.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get layer attribute values tibble — layer_attributes_tbl","text":"Request excluding spatial information can significantly faster. Can useful inspecting attribute values constructing feature filters targeted faster layer download.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/layer_attributes_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get layer attribute values tibble — layer_attributes_tbl","text":"","code":"# \\dontrun{ layer_attributes_tbl(service = \"human_activities\", layer = \"maritimebnds\") #> ✔ WFS client created successfully #> ℹ Service: \"https://ows.emodnet-humanactivities.eu/wfs\" #> ℹ Version: \"2.0.0\" #> # A tibble: 1,047 × 12 #>    gml_id     objec…¹ mblsz…² localid siten…³ legalfound legal…⁴ country natio…⁵ #>    <chr>        <dbl>   <int>   <dbl> <chr>   <date>     <chr>   <chr>   <chr>   #>  1 maritimeb…       1       7   49469 Intern… NA         NA      Germany NA      #>  2 maritimeb…       2       7   49471 Intern… NA         NA      Bulgar… NA      #>  3 maritimeb…       3       7   49472 Intern… NA         NA      Croatia NA      #>  4 maritimeb…       4       7   49473 Intern… NA         NA      Denmark NA      #>  5 maritimeb…       5       7   49474 Intern… NA         NA      Estonia NA      #>  6 maritimeb…       6       7   49475 Intern… NA         NA      Finland NA      #>  7 maritimeb…       7       7   49476 Intern… NA         NA      France  NA      #>  8 maritimeb…       8       7   49478 Intern… NA         NA      Ireland NA      #>  9 maritimeb…       9       7   49479 Intern… NA         NA      Italy   NA      #> 10 maritimeb…      10       7   49480 Intern… NA         NA      Latvia  NA      #> # … with 1,037 more rows, 3 more variables: nutscode <chr>, mblsds_mbl <chr>, #> #   shape_leng <dbl>, and abbreviated variable names ¹​objectid, ²​mblszotpid, #> #   ³​sitename, ⁴​legalfou_1, ⁵​nationalle # }"},{"path":"https://emodnet.github.io/EMODnetWFS/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::[\\%>\\%][magrittr::pipe] details.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://emodnet.github.io/EMODnetWFS/news/index.html","id":"emodnetwfs-development-version","dir":"Changelog","previous_headings":"","what":"EMODnetWFS (development version)","title":"EMODnetWFS (development version)","text":"Added ability pass vendor parameter EMODnetWFS::emodnet_get_layers() queries (#88). Added memoising (caching R session) functions getting services layers information (#52).","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/news/index.html","id":"emodnetwfs-201","dir":"Changelog","previous_headings":"","what":"EMODnetWFS 2.0.1","title":"EMODnetWFS 2.0.1","text":"Introduced better handling server response errors.","code":""},{"path":"https://emodnet.github.io/EMODnetWFS/news/index.html","id":"emodnetwfs-200","dir":"Changelog","previous_headings":"","what":"EMODnetWFS 2.0.0","title":"EMODnetWFS 2.0.0","text":"NEW FEATURE: Added ecql filtering capability ability interrogate feature attribute (see relevant vignette). Bug fix: corrected service namespace definition using wfs object Breaking Change: set extract default CRS service information (getDeafultCRS method) Breaking change: Removed default service value. Updated new EMODnet Seabed Habitats endpoints Added NEWS.md file track changes package.","code":""}]
